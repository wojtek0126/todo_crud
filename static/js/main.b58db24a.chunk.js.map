{"version":3,"sources":["styles/themes/settings.js","assets/poly4.webp","components/containers/FooterWrapper.js","components/molecules/Footer.js","API/variables.js","API/fetch.js","functions/functionStorage.js","components/atoms/ProgressCounter.js","components/atoms/MediumText.js","components/atoms/ButtonWithLink.js","content/contentEng.js","styles/gradients.js","content/icons.js","components/containers/StatsTitleWrapper.js","variables/variablesStorage.js","components/recoilTodoList/TitleStats.js","assets/b4769e3a52766f30e86b375391c84441.jpg","components/atoms/TitleText.js","components/atoms/ButtonPrimary.js","components/atoms/TextArea.js","functions/recoil.js","components/containers/ThoughtBoardWrapper.js","components/containers/ThoughtButtonsWrapper.js","components/recoilTodoList/ThoughtBoard.js","styles/themes/theme.js","components/containers/TitleWrapper.js","assets/bubbles9.jpg","components/recoilTodoList/TitleScreen.js","components/containers/CreateWrapper.js","components/containers/CreateButtonsWrapper.js","components/recoilTodoList/TodoItemCreator.js","components/molecules/OptionBox.js","components/recoilTodoList/TodoListFilters.js","components/containers/StatsWrapper.js","components/recoilTodoList/TodoListStats.js","components/atoms/SearchField.js","components/containers/ListWrapper.js","components/containers/ItemFilteredWrapper.js","components/atoms/BigText.js","components/molecules/YesNoPopup.js","assets/bubbles4.jpg","components/containers/TaskDetailsWrapper.js","components/atoms/DisplayDetailsText.js","components/containers/TaskDetailBtnWrapper.js","components/recoilTodoList/TaskDetails.js","components/containers/ButtonsWrapper.js","components/containers/ItemWrapper.js","components/containers/ItemStatusWrapper.js","components/containers/ItemButtonsWrapper.js","components/recoilTodoList/TodoItem.js","assets/bubbles2.jpg","components/recoilTodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["borders","boxOpacity","FooterWrapper","contentArea","sx","justifyContent","alignItems","flexDirection","width","fontSize","textAlign","margin","marginTop","padding","opacity","borderRadius","border","backgroundImage","background3","Footer","brandName","year","fontFamily","fontWeight","color","API_TOKEN","API","getAllTasks","successCallback","fetch","then","response","json","data","error","catch","console","log","updateTask","id","modified","headers","Authorization","method","body","JSON","stringify","r","err","timeStampFormatted","timestamp","Date","now","Intl","DateTimeFormat","month","day","hour","minute","second","format","replaceItemAtIndex","arr","index","newValue","slice","switchDisplayStateOnOff","setDisplay","onOff","handleOnChangeTargetValue","setTargetState","value","target","setTimeout","getTodos","setTodos","a","ProgressCounter","text","counter","backgroundColor","borderColor","wordBreak","display","marginBottom","px","py","textDecoration","MediumText","alignSelf","ButtonWithlink","to","onClick","displayIt","background","cursor","textTransform","showAllTasksTxt","buttonBackgroundType1","buttonBackgroundType2","buttonBackgroundType3","buttonBackgroundType4","taskDetailsDetailBackground","enterListBtnIcon","openMenuBtnIcon","saveBtnIcon","deleteBtnIcon","addTaskBtnIcon","goBackBtnIcon","detailsBtnIcon","hideDetailsBtnIcon","editBtnIcon","statusBtnIcon","confirmBtnIcon","declineBtnIcon","StatsTitleWrapper","backgroundSize","on","off","bulbOn","bulbOff","filteredOptions","TitleStats","useState","tasksStatsTitle","setTasksStatsTitle","tasksStatsTitleBtnLight","setTasksStatsTitleBtnLight","useEffect","titleStats","list","todoList","totalNumTitleScrn","length","totalCompletedNumTitleScrn","filter","item","completed","percentCompletedTitleScrn","totalUncompletedNumTitleScrn","percentRound","Math","round","nonRecoilStats","myTarget","setIt","handleOnOffOnClick","TitleText","text1","text2","text3","flexWrap","ButtonPrimary","heigth","type","height","transition","marginRight","TextArea","cols","placeholder","labelText","onChange","onBlur","disabled","textareaBorderColor","textareaBorderFocusColor","maxWidth","outline","todoListState","atom","key","default","todoListFilterState","textInputState","inputLengthState","selector","get","searchTextInputState","filteredTodoListState","todoListStatsState","totalNum","totalCompletedNum","totalUncompletedNum","percentCompleted","ThoughtBoardWrapper","ThoughtButtonsWrapper","ThoughtBoard","setTargetState1","setTargetState2","boardTxtFromLocal","localStorage","getItem","boardBtnMenu","setBoardrBtnMenu","boardBtnAdd","setBoardBtnAdd","boardBtnDelete","setBoardBtnDelete","boardBtnMenuLight","setBoardBtnMenuLight","boardText","setBoardText","setInput","useSetRecoilState","localKey","localValue","inputValue","undefined","setItem","clear","handleClickClearLocal","fonts","heading","blackboard","fontSizes","fontWeights","blackboardThick","lineHeights","colors","boxBorder","boxBackground","titleText1","titleText2","titleText3","textWhite","placeHolderText","counterText","searchText","optionsText","muted","buttons1","buttons2","buttons3","buttonText","buttonText2","buttonsClicked","checkboxBorder","optionBoxBackground","searchFilterBackground","inputBackground","inputBorder","inputBorderFocus","inputBorderEditOn","counterAll","counterInProgress","counterCompleted","counterPercentage","taskDetailBackground","taskDetailContentBackground","taskDetailBorderColor","space","breakpoints","styles","Layout","lineHeight","Container","TitleWrapper","TitleScreen","inputLength","useRecoilValue","theme","paddingTop","imageUrl","CreateWrapper","CreateButtonsWrapper","getId","TodoItemCreator","creatorBtnMenu","setCreatorBtnMenu","creatorBtnAdd","setCreatorBtnAdd","creatorBtnBack","setCreatorBtnBack","creatorBtnMenuLight","setCreatorBtnMenuLight","textareaDisplay","setTextareaDisplay","setTodoList","getInput","addItem","title","taskData","todoData","user_id","created_at","updated_at","oldTodoList","OptionBox","options","map","el","TodoListFilters","useRecoilState","setFilter","StatsWrapper","TodoListStats","SearchField","ListWrapper","ItemFilteredWrapper","BigText","YesNoPopup","onClickYes","onClickNo","messageText","yesText","noText","TaskDetailsWrapper","background2","paddingLeft","paddingRight","maxHeight","DisplayDetailsText","headText","contentText","TaskDetailBtnWrapper","TaskDetails","clickClose","getTask","updated","updateDisplay","completionText","due_on","ButtonsWrapper","displayStyle","ItemWrapper","ItemStatusWrapper","ItemButtonsWrapper","TodoItem","initialTitleDisplay","todoItemPrevious","detailsPadding","setDetailsPadding","detailsHeight","setDetailsHeight","findIndex","listItem","initTaskData","setInitTaskData","updatedData","setUpdatedData","setDisabled","taskBtnMenu","setTaskBtnMenu","taskBtnEdit","setTaskBtnEdit","taskBtnStatus","setTaskBtnStatus","taskBtnDelete","setTaskBtnDelete","taskBtnDetails","setTaskBtnDetails","taskBtnMenuLight","setTaskBtnMenuLight","yesNoEditPopup","setYesNoEditPopup","yesNoDeletePopup","setYesNoDeletePopup","yesNoStatusPopup","setYesNoStatusPopup","taskDetailView","setTaskDetailView","taskStatusView","setTaskStatusView","setTextareaBorderColor","setTextareaBorderFocusColor","todoDataInit","completedData","toggleItemCompletion","newList","todoDataModCheck","deleteItem","removeItemAtIndex","handleOnBlur","todoDataMod","confirmEditChanges","TodoList","todos","toSearch","setToSearch","filteredData","filterData","includes","minHeight","todoItem","App","exact","from","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58db24a.chunk.js","sourcesContent":["/* eslint-disable */\r\n// setting for border radius of all except buttons\r\nexport const generalBorderRadius = 5\r\n\r\n// setting for border radius of buttons\r\nexport const buttonsBorderRadius = 5\r\n\r\n// setting for border radius of task details\r\nexport const detailsBorderRadius = 5\r\n\r\n// universal borders variable\r\nexport const borders = 'none' \r\n\r\n// border for footer\r\nexport const footerBorder = 'none'\r\n\r\n// opacity for task boxes etc\r\nexport const boxOpacity = '0.9'","export default __webpack_public_path__ + \"static/media/poly4.a48ef4f1.webp\";","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx } from 'theme-ui'\r\nimport { generalBorderRadius, footerBorder, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\n\r\nconst FooterWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      justifyContent: 'center',\r\n      alignItems: 'flex-end',\r\n    }}\r\n  >\r\n       <Flex\r\n      sx={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        width: '100vw',\r\n        fontSize: 4,\r\n        textAlign: 'center',\r\n        margin: 3,\r\n        marginTop: '7px',\r\n        padding: '9px',\r\n        opacity: `${boxOpacity}`,\r\n        borderRadius: generalBorderRadius,\r\n        border: `${footerBorder}`,\r\n        // borderColor: `boxBorder`,\r\n        // backgroundColor: 'boxBackground',\r\n        // background: `${taskBackground}`,\r\n        backgroundImage: `url(${background3})`,\r\n      }}\r\n    >\r\n      {contentArea}\r\n    </Flex>\r\n  </Flex>\r\n)\r\n\r\nexport default FooterWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport FooterWrapper from '../containers/FooterWrapper'\r\n\r\nconst Footer = ({ brandName, year }) => {\r\n  return (\r\n   <FooterWrapper contentArea={\r\n   <div\r\n    sx={{\r\n      fontFamily: 'heading',\r\n      fontWeight: 'body',\r\n      color: `text`,\r\n    }}\r\n  >\r\n    © {year} {brandName}\r\n  </div>\r\n  } />  \r\n  )\r\n}\r\n\r\nexport default Footer\r\n","/* eslint-disable */\r\n\r\nexport const userId = 704\r\n\r\nexport const API_TOKEN =\r\n  '704ca2c83c1da8b69a000377346dfbb48261db11383f1643e9c81da767cfeb7b'\r\nexport const API = `https://gorest.co.in/public-api/todos`\r\n\r\n","/* eslint-disable */\r\n// json-server --watch src/API/todos.json --host 127.0.0.1\r\nimport { API, API_TOKEN } from './variables'\r\n\r\n// get all the tasks from database\r\nexport const getAllTasks = (successCallback) => {\r\n  fetch(`${API}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      successCallback(data.data)\r\n      if (data.error === false && typeof successCallback === 'function') {\r\n        successCallback(data.data)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n    })\r\n}\r\n\r\n// get single task\r\nexport const getSingleTask = (id, successCallback) => {\r\n  fetch(`${API}/${id}`)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      successCallback(data.data)\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n    })\r\n}\r\n\r\n// add a task\r\nexport const addTask = (taskData, successCallback) => {\r\n  fetch(`${API}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${API_TOKEN}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    method: 'POST',\r\n    body: JSON.stringify(taskData),\r\n  })\r\n    .then((r) => r.json())\r\n    .then((data) => {\r\n      if (data.error === false && typeof successCallback === 'function') {\r\n        successCallback(data)\r\n      }\r\n    })\r\n    .catch((err) => console.log(err))\r\n}\r\n\r\n// edit task\r\nexport const updateTask = (id, modified, successCallback) => {\r\n  fetch(`${API}/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${API_TOKEN}`,\r\n      'Content-Type': 'application/json',\r\n    },\r\n    method: 'PUT',\r\n    body: JSON.stringify(modified),\r\n  })\r\n    .then((r) => r.json())\r\n    .then((data) => {\r\n      if (data.error === false && typeof successCallback === 'function') {\r\n        successCallback(data.data)\r\n      }\r\n    })\r\n    .catch((err) => console.log(err))\r\n}\r\n\r\n// delete task\r\nexport const deleteTask = (id, successCallback) => {\r\n  fetch(`${API}/${id}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${API_TOKEN}`,\r\n    },\r\n    method: 'DELETE',\r\n  })\r\n    .then((r) => r.json())\r\n    .then((data) => {\r\n      if (data.error === false && typeof successCallback === 'function') {\r\n        successCallback()\r\n      }\r\n    })\r\n    .catch((err) => console.log(err))\r\n}\r\n","/* eslint-disable */\r\n\r\nimport { getAllTasks } from \"../API/fetch\"\r\n\r\n// switch button text on click \r\nexport const switchBtnTxt = (setUpdateState, text1, text2, delay = 1800) => {\r\n  setUpdateState(text2)\r\n  setTimeout(() => {\r\n    setUpdateState(text1)\r\n  }, delay)\r\n}\r\n\r\n// formatted current date and time, for create and edit tasks\r\nexport const timeStampFormatted = () => {\r\n  const timestamp = Date.now() // This would be the timestamp you want to format\r\n  const formatted = new Intl.DateTimeFormat('en-US', {\r\n    year: 'numeric',\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit',\r\n    second: '2-digit',\r\n  }).format(timestamp)\r\n  return formatted\r\n}\r\n\r\n// title screen stats from API not recoil state\r\nexport const nonRecoilStats = (list) => {\r\n  const todoList = list\r\n  const totalNumTitleScrn = todoList.length\r\n  const totalCompletedNumTitleScrn = todoList.filter(\r\n    (item) => item.completed,\r\n  ).length\r\n  const totalUncompletedNumTitleScrn =\r\n    totalNumTitleScrn - totalCompletedNumTitleScrn\r\n  const percentCompletedTitleScrn =\r\n    totalNumTitleScrn === 0\r\n      ? 0\r\n      : (totalCompletedNumTitleScrn / totalNumTitleScrn) * 100\r\n  const percentRound = Math.round(percentCompletedTitleScrn)\r\n  return {\r\n    totalNumTitleScrn,\r\n    totalCompletedNumTitleScrn,\r\n    totalUncompletedNumTitleScrn,\r\n    percentRound\r\n  }\r\n}\r\n\r\n// TodoItem.js functions\r\nexport const replaceItemAtIndex = (arr, index, newValue) => {\r\n  return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)]\r\n}\r\n\r\nexport const removeItemAtIndex = (arr, index) => {\r\n  return [...arr.slice(0, index), ...arr.slice(index + 1)]\r\n}\r\n\r\n//switches display state on/off\r\nexport const switchDisplayStateOnOff = (setDisplay, onOff) => {\r\n  setDisplay(onOff);  \r\n}\r\n\r\n  // onblur to handle input lag\r\n  export const handleOnBlur = (setInput, value, timeout = 0) => {\r\n    setTimeout(() => {\r\n      setInput(value)\r\n    }, timeout)\r\n  }\r\n\r\n  // on change value handler\r\n  export const handleOnChangeTargetValue = (setTargetState) => ({ target: { value } }) => {\r\n    setTimeout(() => {    \r\n        setTargetState(value)      \r\n    }, 0)\r\n  }\r\n\r\n    // on change value handler with two states output\r\n    export const handleOnChangeDoubleOutput = (setTargetState1, setTargetState2) => ({ target: { value } }) => {\r\n      setTimeout(() => {    \r\n          setTargetState1(value)\r\n          setTargetState2(value)      \r\n      }, 0)\r\n    }\r\n\r\n  //get all tasks and set state with them\r\n  export const getTodos = async (setTodos) => {\r\n    getAllTasks(setTodos)\r\n  }\r\n\r\n  // switch target on off\r\n  export const handleOnOffOnClick = (myTarget, setIt, on, off) => {\r\n    if (myTarget === on) {\r\n      setIt(off)\r\n    } else {\r\n      setIt(on)\r\n    }\r\n  }\r\n\r\n// ThoughtBoard.js functions\r\nexport const handleClickSaveToLocal = (localKey, localValue, inputValue) => {\r\n  // no empty content - validator\r\n  if (inputValue === '' || inputValue === null || inputValue === undefined) {\r\n  } else {\r\n    localStorage.setItem(localKey, localValue)\r\n  }\r\n}\r\n\r\nexport const handleClickClearLocal = (setBoardText) => {\r\n  // if (inputValue === '' || inputValue === null || inputValue === undefined) {\r\n  // } else {\r\n    localStorage.clear()\r\n    setTimeout(() => {\r\n      setBoardText('')\r\n    })\r\n  // }\r\n}\r\n\r\n\r\n\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst ProgressCounter = ({\r\n  text,\r\n  counter,\r\n  backgroundColor,\r\n  color,\r\n  borderColor,\r\n}) => (\r\n  <button\r\n    sx={{\r\n      width: '100%',\r\n      wordBreak: 'break-word',\r\n      backgroundColor: `${backgroundColor}`,\r\n      borderRadius: '4px',\r\n      border: `2px solid`,\r\n      borderColor: `${borderColor}`,\r\n      color: `${color}`,\r\n      display: 'inline-block',\r\n      fontFamily: 'heading',\r\n      fontSize: [0, 1],\r\n      fontWeight: 'bold',\r\n      marginBottom: 1,\r\n      px: 3, // shorthand for defining padding-left and padding-right\r\n      py: 2, // shorthand for defining padding-top and padding-bottom\r\n      textDecoration: 'none',\r\n      // textTransform: 'uppercase',\r\n    }}\r\n  >\r\n    {' '}\r\n    {text} {counter}\r\n  </button>\r\n)\r\n\r\nexport default ProgressCounter\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst MediumText = ({\r\n  text,\r\n  color,\r\n  marginBottom,\r\n  marginTop,\r\n  display,\r\n  alignSelf,\r\n}) => (\r\n  <div\r\n    sx={{\r\n      fontFamily: 'heading',\r\n      fontWeight: 'heading',\r\n      fontSize: [1, 2],\r\n      color: `${color}`,\r\n      marginBottom: `${marginBottom}`,\r\n      marginTop: `${marginTop}`,\r\n      display: `${display}`,\r\n      alignSelf: `${alignSelf}`,\r\n    }}\r\n  >\r\n    {text}\r\n  </div>\r\n)\r\n\r\nexport default MediumText\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { Link } from 'react-router-dom'\r\nimport { buttonsBorderRadius } from '../../styles/themes/settings'\r\n\r\nconst ButtonWithlink = ({\r\n  to,\r\n  text,\r\n  backgroundColor,\r\n  onClick,\r\n  displayIt,\r\n  alignSelf = 'center',\r\n}) => (\r\n  <Link\r\n    to={to}\r\n    onClick={onClick}\r\n    sx={{\r\n      display: `${displayIt}`,\r\n      alignSelf: `${alignSelf}`,\r\n      wordBreak: 'break-word',\r\n      // backgroundColor: `${backgroundColor}`,\r\n      background: `${backgroundColor}`,\r\n      borderRadius: buttonsBorderRadius,\r\n      border: 'none',\r\n      color: 'buttonText2',\r\n      textAlign: 'center',\r\n      fontFamily: 'heading',\r\n      fontSize: [0, 1],\r\n      fontWeight: 'bold',\r\n      marginTop: 2,\r\n      marginBottom: 1,\r\n      cursor: 'pointer',\r\n      px: 3, // shorthand for defining padding-left and padding-right\r\n      py: 2, // shorthand for defining padding-top and padding-bottom\r\n      textDecoration: 'none',\r\n      textTransform: 'uppercase',\r\n      // '&:hover, &:focus': { backgroundColor: 'buttonsClicked' },\r\n    }}\r\n  >\r\n    {text}\r\n  </Link>\r\n)\r\n\r\nexport default ButtonWithlink\r\n","/* eslint-disable */\r\n// all text content in English lands here, in exported variables\r\n\r\n// recoil.js text\r\nexport const showAllTasksTxt = 'Show All Tasks'\r\nexport const showInProgressOnlyTxt = 'In progress only'\r\nexport const showCompletedOnlyTxt = 'Completed only'\r\n\r\n// thought board main menu text\r\nexport const thoughtBoardTitleTxt =\r\n  'Set your goal and completion reward, or simply write down loose thoughts:'\r\nexport const thoughtRememberBtnTxt = 'Remember'\r\nexport const thoughtForgetBtnTxt = 'Forget'\r\nexport const thoughtForgottenTxt = 'Forgotten'\r\nexport const thoughtRememberedTxt = 'Remembered'\r\nexport const thoughtRememberEmptyTxt = 'Nothing to remember'\r\nexport const thoughtForgetEmpytTxt = 'Nothing to forget'\r\n\r\n// title screen header and footer text\r\nexport const titlePart1Txt = 'The'\r\nexport const titlePart2Txt = 'Eazzy'\r\nexport const titlePart3Txt = 'Organizer'\r\nexport const footerYearTxt = '2021'\r\nexport const footerBrandnameTxt = 'HFM Wojbaza'\r\n\r\n// title screen statistics text\r\nexport const titleStatsTitleTxt = 'Your progress:'\r\nexport const titleStatsTotalTxt = 'Total tasks:'\r\nexport const titleStatsCompletedTxt = 'Completed:'\r\nexport const titleStatsInProgressTxt = 'In progress:'\r\nexport const titleStatsPercentCompletedTxt = 'Percent completed:'\r\nexport const titleStatsToActionBtnTxt = 'O'\r\n\r\n// text for item content and options in TodoItem.js\r\nexport const taskNumberText = 'Task'\r\nexport const updateText = 'Update task'\r\nexport const updateEmptyText = 'Cannot be empty'\r\nexport const deleteText = 'Delete task'\r\nexport const yesText = 'Confirm'\r\nexport const noText = 'Go back'\r\nexport const statusYesNoMessage = 'Change task status?'\r\nexport const editYesNoMessage = 'Editing enabled, proceed when ready'\r\nexport const deleteYesNoMessage = 'Delete this task?'\r\nexport const todoItemStatusInProgressText = 'Task is currently in progress'\r\nexport const todoItemStatusCompletedText = 'Task is completed'\r\nexport const todoItemChangeStatusBtnTxt = 'Change status'\r\nexport const todoItemShowDetailsBtnTxt = 'Show details'\r\n\r\n// item creator text for adding new task or going back to menu\r\nexport const todoCreatorAddTaskBtnTxt = 'Add new task'\r\nexport const todoCreatorTaskAddedTxt = 'New task added'\r\nexport const todoCreatorTaskEmptyTxt = 'Nothing to add'\r\nexport const todoCreatorTitleTxt = 'Create new task:'\r\nexport const todoCreatorPlaceholderTxt = 'What needs to be done?'\r\nexport const todoCreatorBackToMainTxt = 'Back to main menu'\r\nexport const todoCreatorNotUpdatedYetTxt = 'Not updated yet'\r\n\r\n// search filter text in TodoList.js\r\nexport const todoListTitleTxt = 'Find Your task:'\r\nexport const todoListSearchPlaceholderTxt = 'Search'\r\n\r\n// text for task filter\r\nexport const todoFilterShowAllTxt = 'Show all tasks'\r\nexport const todoFilterCompletedOnlyTxt = 'Completed only'\r\nexport const todoFilterInProgressOnlyTxt = 'In progress only'\r\n\r\n// text for action screen stats TodoListStats.js\r\nexport const todoActionStatsTitleTxt = 'Your progress:'\r\nexport const todoActionStatsTotalTxt = 'Total tasks:'\r\nexport const todoActionStatsCompletedTxt = 'Completed:'\r\nexport const todoActionStatsInProgressTxt = 'In progress:'\r\n\r\n// text from TaskDetails.js\r\nexport const taskDetailsTaskNumberTxt = 'Task number:'\r\nexport const taskDetailsTaskContentTxt = 'Your task:'\r\nexport const taskDetailsStatusTxt = 'Status:'\r\nexport const taskDetailsTimeStartedTxt = 'Deadline:'\r\nexport const taskDetailsTimeUpdatedTxt = 'Last time updated:'\r\nexport const taskDetailsInProgressTxt = 'Task in progress'\r\nexport const taskDetailsCloseBtnTxt = 'Close'\r\nexport const taskDetailsCompletedTxt = 'Task completed'\r\n","/* eslint-disable */\r\n// gradients\r\nexport const titleBackground =\r\n  'linear-gradient(to top, #0ba360 0%, #3cba92 100%)'\r\nexport const itemDetailsBackground =\r\n  'linear-gradient(to right, #43e97b 0%, #38f9d7 100%)'\r\nexport const buttonBackgroundType1 =\r\n  'radial-gradient( circle 542px at 16.6% 38.6%,  rgba(66,164,14,1) 0%, rgba(86,230,99,1) 100.2% )'\r\nexport const buttonBackgroundType2 =\r\n  'radial-gradient( circle 627px at 16.2% 74.3%,  rgba(57,145,204,1) 89.9%, #bbb 90% )'\r\nexport const buttonBackgroundType3 =\r\n  'radial-gradient( circle 603px at 32.8% 51%,  rgba(253,185,51,1) 0%, rgba(253,211,117,1) 90.3% )'\r\nexport const buttonBackgroundType4 =\r\n  'linear-gradient( 110.3deg,  rgba(73,93,109,1) 4.3%, rgba(49,55,82,1) 96.7% )'\r\nexport const appBackground = 'linear-gradient(to top, #0ba360 0%, #3cba92 100%)'\r\nexport const taskBackground =\r\n  'linear-gradient( 109.6deg,  rgba(0,191,165,1) 11.2%, rgba(0,140,122,1) 100.2% )'\r\nexport const taskDetailsBackground =\r\n  'radial-gradient( circle farthest-corner at -8.9% 51.2%,  rgba(255,124,0,1) 0%, rgba(255,124,0,1) 15.9%, rgba(255,163,77,1) 15.9%, rgba(255,163,77,1) 24.4%, rgba(19,30,37,1) 24.5%, rgba(19,30,37,1) 66% )'\r\nexport const taskDetailsDetailBackground =\r\n  'radial-gradient( circle 464px at 51.6% 98.9%,  rgba(254,243,87,1) 13.4%, rgba(248,164,66,1) 100.2% )'\r\n\r\n// background-image: radial-gradient( circle 542px at 16.6% 38.6%,  rgba(66,164,14,1) 0%, rgba(86,230,99,1) 100.2% );\r\n","/* eslint-disable */\r\nimport { RiDeleteBinLine, RiEdit2Line } from 'react-icons/ri'\r\nimport { CgMenuRound } from 'react-icons/cg'\r\nimport { HiOutlineSave } from 'react-icons/hi'\r\nimport { MdNotInterested } from 'react-icons/md'\r\nimport { FiEye } from 'react-icons/fi'\r\nimport { BiCheckCircle } from 'react-icons/bi'\r\nimport { FaFlagCheckered } from 'react-icons/fa'\r\nimport { ImExit, ImEnter } from 'react-icons/im'\r\nimport { GoDiffAdded } from 'react-icons/go'\r\n// icons buttons\r\nexport const enterListBtnIcon = <ImEnter />\r\nexport const openMenuBtnIcon = <CgMenuRound />\r\nexport const saveBtnIcon = <HiOutlineSave />\r\nexport const deleteBtnIcon = <RiDeleteBinLine />\r\nexport const addTaskBtnIcon = <GoDiffAdded />\r\nexport const goBackBtnIcon = <ImExit />\r\nexport const detailsBtnIcon = <FiEye />\r\nexport const hideDetailsBtnIcon = <ImExit />\r\nexport const editBtnIcon = <RiEdit2Line />\r\nexport const statusBtnIcon = <FaFlagCheckered />\r\nexport const confirmBtnIcon = <BiCheckCircle />\r\nexport const declineBtnIcon = <MdNotInterested />\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui';\r\nimport { taskBackground } from '../../styles/gradients';\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings';\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\nconst StatsTitleWrapper = ({contentArea}) => (    \r\n    <Flex sx={{    \r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n        // backgroundColor: 'boxBackground',                    \r\n        // background: `${taskBackground}`,\r\n        opacity: `${boxOpacity}`,\r\n        color: 'text',\r\n        border: `${borders}`,\r\n        borderColor: 'boxBorder', \r\n        borderRadius: generalBorderRadius,\r\n        fontSize: 4,\r\n        margin: 3,       \r\n        padding: 3,\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n      }}>\r\n    {contentArea}\r\n</Flex> \r\n);\r\n\r\n\r\nexport default StatsTitleWrapper;\r\n\r\n\r\n    ","/* eslint-disable */\r\n// reusable variables\r\n\r\nimport { todoFilterCompletedOnlyTxt, todoFilterInProgressOnlyTxt, todoFilterShowAllTxt } from \"../content/contentEng\"\r\n\r\n// display flex or none\r\nexport const on = 'flex'\r\nexport const off = 'none'\r\n\r\n// buttons light on off theme colors\r\nexport const bulbOn = 'bulbOn'\r\nexport const bulbOff = 'bulbOff'\r\n\r\n// variable for TodoListFilters.js\r\nexport const filteredOptions = [\r\n    todoFilterShowAllTxt,\r\n    todoFilterCompletedOnlyTxt,\r\n    todoFilterInProgressOnlyTxt,\r\n  ]\r\n\r\n  // width for buttons\r\n  export const empty = 0\r\n  export const full = '100%'","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport { getTodos, handleOnOffOnClick, nonRecoilStats } from '../../functions/functionStorage'\r\nimport ProgressCounter from '../atoms/ProgressCounter'\r\nimport MediumText from '../atoms/MediumText'\r\nimport ButtonWithlink from '../atoms/ButtonWithLink'\r\nimport {\r\n  titleStatsTitleTxt,\r\n  titleStatsTotalTxt,\r\n  titleStatsCompletedTxt,\r\n  titleStatsInProgressTxt,\r\n  titleStatsPercentCompletedTxt,\r\n} from '../../content/contentEng'\r\nimport { buttonBackgroundType1 } from '../../styles/gradients'\r\nimport { enterListBtnIcon } from '../../content/icons'\r\nimport StatsTitleWrapper from '../containers/StatsTitleWrapper'\r\nimport { bulbOff, bulbOn } from '../../variables/variablesStorage'\r\n\r\nconst TitleStats = () => {  \r\n  const [tasksStatsTitle, setTasksStatsTitle] = useState([])\r\n  const [tasksStatsTitleBtnLight, setTasksStatsTitleBtnLight] =\r\n    useState(bulbOff)\r\n\r\n  useEffect(() => {   \r\n    getTodos(setTasksStatsTitle)\r\n  }, [])\r\n\r\n  const titleStats = nonRecoilStats(tasksStatsTitle)  \r\n\r\n  return (\r\n    <StatsTitleWrapper\r\n      contentArea={\r\n        <>\r\n          <MediumText text={titleStatsTitleTxt} marginBottom={2} />\r\n          <ProgressCounter\r\n            text={`${titleStatsTotalTxt} ${titleStats.totalNumTitleScrn}`}\r\n            backgroundColor={'counterAll'}\r\n            color={`counterText`}\r\n          />\r\n          <ProgressCounter\r\n            text={`${titleStatsCompletedTxt} ${titleStats.totalCompletedNumTitleScrn}`}\r\n            backgroundColor={'counterInProgress'}\r\n            color={`counterText`}\r\n          />\r\n          <ProgressCounter\r\n            text={`${titleStatsInProgressTxt} ${titleStats.totalUncompletedNumTitleScrn}`}\r\n            backgroundColor={'counterCompleted'}\r\n            color={`counterText`}\r\n          />\r\n          <ProgressCounter\r\n            text={`${titleStatsPercentCompletedTxt} ${titleStats.percentRound}`}\r\n            backgroundColor={'counterPercentage'}\r\n            color={`counterText`}\r\n          />\r\n          <ButtonWithlink\r\n            to={'action'}\r\n            text={enterListBtnIcon}\r\n            backgroundColor={buttonBackgroundType1}\r\n            alignSelf={'baseline'}\r\n            color={tasksStatsTitleBtnLight}\r\n            onClick={() =>\r\n              handleOnOffOnClick(\r\n                tasksStatsTitleBtnLight,\r\n                setTasksStatsTitleBtnLight,\r\n                bulbOn,\r\n                bulbOff,\r\n              )\r\n            }\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default TitleStats\r\n","export default __webpack_public_path__ + \"static/media/b4769e3a52766f30e86b375391c84441.3d007a0b.jpg\";","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst TitleText = ({ text1, text2, text3, marginBottom }) => (\r\n  <h2\r\n    sx={{\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n      // backgroundColor: `${backgroundColor}`,\r\n      background: `transparent`,\r\n      fontFamily: 'heading',\r\n      fontWeight: 'heading',\r\n      fontSize: [3, 4, 5],\r\n      margin: 0,\r\n      marginBottom: `${marginBottom}`,\r\n    }}\r\n  >\r\n    <span sx={{ color: `titleText1` }}>{text1}</span>\r\n    <span sx={{ color: `titleText2` }}>{text2}</span>\r\n    <span sx={{ color: `titleText3` }}>{text3}</span>\r\n  </h2>\r\n)\r\n\r\nexport default TitleText\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { buttonsBorderRadius } from '../../styles/themes/settings'\r\n\r\nconst ButtonPrimary = ({\r\n  heigth,\r\n  text,\r\n  backgroundColor,\r\n  onClick,\r\n  type,\r\n  id,\r\n  displayIt,\r\n  color = 'buttonText2',\r\n  alignSelf = 'center',\r\n}) => (\r\n  <div>\r\n    <button\r\n      type={type}\r\n      onClick={onClick}\r\n      id={id}\r\n      sx={{\r\n        wordBreak: 'break-word',\r\n        alignSelf: `${alignSelf}`,\r\n        // backgroundColor: `${backgroundColor}`,\r\n        background: `${backgroundColor}`,\r\n        height: `${heigth}`,\r\n        transition: '0.5s',\r\n        borderRadius: buttonsBorderRadius,\r\n        border: 'none',\r\n        color: `${color}`,\r\n        display: 'flex !important',\r\n        fontFamily: 'heading',\r\n        fontSize: [0, 1],\r\n        fontWeight: 'bold',\r\n        marginBottom: 1,\r\n        marginTop: 2,\r\n        marginRight: 2,\r\n        cursor: 'pointer',\r\n        px: 3, // shorthand for defining padding-left and padding-right\r\n        py: 2, // shorthand for defining padding-top and padding-bottom\r\n        textDecoration: 'none',\r\n        textTransform: 'uppercase',\r\n        display: `${displayIt}`,\r\n        // '&:hover, &:focus': { backgroundColor: 'buttonsClicked' },\r\n      }}\r\n    >\r\n      {text}\r\n    </button>\r\n  </div>\r\n)\r\n\r\nexport default ButtonPrimary\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx, Label, Textarea } from 'theme-ui'\r\n\r\nconst TextArea = ({\r\n  value,\r\n  cols,\r\n  placeholder,\r\n  labelText,\r\n  onChange,\r\n  onBlur,\r\n  disabled,\r\n  textareaBorderColor = 'inputBorder',\r\n  textareaBorderFocusColor,\r\n}) => (\r\n  <Flex>\r\n    <Label\r\n      sx={{\r\n        flexDirection: `column`,\r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',\r\n        fontSize: [`16, 18, 20`],\r\n        margin: 0,\r\n      }}\r\n    >\r\n      {labelText}\r\n      <Textarea\r\n        value={value}\r\n        onChange={onChange}\r\n        cols={cols}\r\n        placeholder={placeholder}\r\n        disabled={disabled}\r\n        onBlur={onBlur}\r\n        sx={{\r\n          // backgroundImage: `url(${blackboard})`,\r\n          backgroundColor: `inputBackground`,\r\n          border: '2px solid',\r\n          borderColor: `${textareaBorderColor}`,\r\n          borderRadius: '4px',\r\n          color: `textWhite`,\r\n          display: 'inline-block',\r\n          fontFamily: 'blackboard',\r\n          fontSize: [2, 3],\r\n          fontWeight: '400 !important',\r\n          marginBottom: 2,\r\n          maxWidth: '100%',\r\n          px: 3, // shorthand for defining padding-left and padding-right\r\n          py: 2, // shorthand for defining padding-top and padding-bottom\r\n          textDecoration: 'none',\r\n          // textTransform: 'uppercase',\r\n          '&:hover, &:focus': {\r\n            // backgroundImage: `url(${blackboard})`,\r\n            backgroundColor: `inputBackground`,\r\n            border: '2px solid',\r\n            borderColor: `${textareaBorderFocusColor}`,\r\n            outline: 'none !important',\r\n          },\r\n          '&::placeholder': { color: 'placeHolderText' },\r\n        }}\r\n      ></Textarea>\r\n    </Label>\r\n  </Flex>\r\n)\r\n\r\nexport default TextArea\r\n","/* eslint-disable */\r\nimport { atom, selector } from 'recoil'\r\nimport {\r\n  showAllTasksTxt,\r\n  showInProgressOnlyTxt,\r\n  showCompletedOnlyTxt,\r\n} from '../content/contentEng'\r\n\r\nexport const todoListState = atom({\r\n  key: 'todoListState',\r\n  default: [],\r\n})\r\n\r\nexport const todoListFilterState = atom({\r\n  key: 'todoListFilterState',\r\n  default: showAllTasksTxt,\r\n})\r\n\r\n// capture input text\r\nexport const textInputState = atom({\r\n  key: 'textInputState',\r\n  default: '',\r\n})\r\n\r\nexport const inputLengthState = selector({\r\n  key: 'inputLengthState',\r\n  get: ({ get }) => {\r\n    const inputText = get(textInputState)\r\n    return inputText.length\r\n  },\r\n})\r\n\r\n// capture search input text\r\nexport const searchTextInputState = atom({\r\n  key: 'searchTextInputState',\r\n  default: '',\r\n})\r\n\r\nexport const searchGetInputState = selector({\r\n  key: 'searchGetInputState',\r\n  get: ({ get }) => {\r\n    const searchInputText = get(searchTextInputState)\r\n    return searchInputText\r\n  },\r\n})\r\n\r\nexport const filteredTodoListState = selector({\r\n  key: 'filteredTodoListState',\r\n  get: ({ get }) => {\r\n    const filter = get(todoListFilterState)\r\n    const list = get(todoListState)\r\n\r\n    switch (filter) {\r\n      case showAllTasksTxt:\r\n        return list.filter((item) => item)\r\n      case showInProgressOnlyTxt:\r\n        return list.filter((item) => !item.completed)\r\n      case showCompletedOnlyTxt:\r\n        return list.filter((item) => item.completed)\r\n      default:\r\n        return list\r\n    }\r\n  },\r\n})\r\n\r\nexport const todoListStatsState = selector({\r\n  key: 'todoListStatsState',\r\n  get: ({ get }) => {\r\n    const todoList = get(todoListState)\r\n    const totalNum = todoList.length\r\n    const totalCompletedNum = todoList.filter((item) => item.completed).length\r\n    const totalUncompletedNum = totalNum - totalCompletedNum\r\n    const percentCompleted =\r\n      totalNum === 0 ? 0 : (totalCompletedNum / totalNum) * 100\r\n\r\n    return {\r\n      totalNum,\r\n      totalCompletedNum,\r\n      totalUncompletedNum,\r\n      percentCompleted,\r\n    }\r\n  },\r\n})\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\n\r\nconst ThoughtBoardWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      maxWidth: '100vw',\r\n      flexDirection: 'column',\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // background: 'box',\r\n      // backgroundColor: 'boxBackground',\r\n      // background: `${taskBackground}`,\r\n      opacity: `${boxOpacity}`,\r\n      color: 'text',\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n      marginBottom: 0,\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default ThoughtBoardWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\n\r\nconst ThoughtButtonsWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      flexWrap: 'wrap',\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      '@media screen and (max-width: 700px)': {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-start',\r\n      },\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default ThoughtButtonsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { useState } from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport ButtonPrimary from '../atoms/ButtonPrimary'\r\nimport MediumText from '../atoms/MediumText'\r\nimport {\r\n  openMenuBtnIcon,\r\n  saveBtnIcon,\r\n  deleteBtnIcon,\r\n} from '../../content/icons'\r\nimport {\r\n  thoughtBoardTitleTxt,\r\n  thoughtForgetBtnTxt,\r\n  thoughtForgottenTxt,\r\n} from '../../content/contentEng'\r\nimport TextArea from '../atoms/TextArea'\r\nimport { textInputState } from '../../functions/recoil'\r\nimport { useSetRecoilState } from 'recoil'\r\nimport {\r\n  buttonBackgroundType2,\r\n  buttonBackgroundType3,\r\n  buttonBackgroundType4,\r\n} from '../../styles/gradients'\r\nimport { bulbOff, bulbOn, off, on } from '../../variables/variablesStorage'\r\nimport ThoughtBoardWrapper from '../containers/ThoughtBoardWrapper'\r\nimport ThoughtButtonsWrapper from '../containers/ThoughtButtonsWrapper'\r\nimport { handleClickClearLocal, handleClickSaveToLocal, handleOnChangeDoubleOutput, switchDisplayStateOnOff } from '../../functions/functionStorage'\r\n\r\nconst ThoughtBoard = () => {\r\n  const boardTxtFromLocal = localStorage.getItem('notes')\r\n  // for display control\r\n  const [boardBtnMenu, setBoardrBtnMenu] = useState(on)\r\n  const [boardBtnAdd, setBoardBtnAdd] = useState(off)\r\n  const [boardBtnDelete, setBoardBtnDelete] = useState(off)\r\n  const [boardBtnMenuLight, setBoardBtnMenuLight] = useState(bulbOff)\r\n  const [boardText, setBoardText] = useState(boardTxtFromLocal)\r\n  const setInput = useSetRecoilState(textInputState)\r\n\r\n\r\n  // popup menu control\r\n  const handleBoardOpenCloseBtn = () => {\r\n    switchDisplayStateOnOff(setBoardrBtnMenu, on)\r\n    switchDisplayStateOnOff(setBoardBtnAdd, off)\r\n    switchDisplayStateOnOff(setBoardBtnDelete, off)\r\n    setTimeout(() => {\r\n      if (boardBtnAdd === 'none') {\r\n        switchDisplayStateOnOff(setBoardrBtnMenu, on)\r\n        switchDisplayStateOnOff(setBoardBtnAdd, on)\r\n        switchDisplayStateOnOff(setBoardBtnDelete, on)\r\n        setBoardBtnMenuLight(bulbOn)\r\n      } else {\r\n        setBoardBtnMenuLight(bulbOff)\r\n      }\r\n    }, 10)\r\n  }\r\n\r\n  return (\r\n    <ThoughtBoardWrapper\r\n      contentArea={\r\n        <>\r\n          <MediumText text={thoughtBoardTitleTxt} marginBottom={2} />\r\n          <TextArea\r\n            value={boardText}\r\n            textareaBorderFocusColor={'inputBorderFocus'}\r\n            onChange={handleOnChangeDoubleOutput(setBoardText, setInput)}\r\n          />\r\n          <ThoughtButtonsWrapper\r\n            contentArea={\r\n              <>\r\n                <ButtonPrimary\r\n                  text={openMenuBtnIcon}\r\n                  onClick={handleBoardOpenCloseBtn}\r\n                  color={boardBtnMenuLight}\r\n                  backgroundColor={buttonBackgroundType4}\r\n                  displayIt={boardBtnMenu}\r\n                />\r\n                <ButtonPrimary\r\n                  text={saveBtnIcon}\r\n                  backgroundColor={buttonBackgroundType2}\r\n                  onClick={() =>\r\n                    handleClickSaveToLocal('notes', boardText, boardText)\r\n                  }\r\n                  displayIt={boardBtnAdd}\r\n                />\r\n                <ButtonPrimary\r\n                  text={deleteBtnIcon}\r\n                  backgroundColor={buttonBackgroundType3}\r\n                  onClick={() =>\r\n                    handleClickClearLocal(\r\n                      setBoardText,\r\n                    )\r\n                  }\r\n                  displayIt={boardBtnDelete}\r\n                />\r\n              </>\r\n            }\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ThoughtBoard\r\n","/* eslint-disable */\r\nexport default {\r\n  fonts: {\r\n    body: \"'Reggae One', cursive\",\r\n    heading: \"'Reggae One', cursive\",\r\n    blackboard: \"'Indie Flower', cursive\",\r\n  },\r\n  fontSizes: [12, 14, 16, 18, 20, 24, 32, 48],\r\n  fontWeights: {\r\n    body: 400,\r\n    heading: 600,\r\n    blackboardThick: 800,\r\n  },\r\n  lineHeights: {\r\n    body: 1.5,\r\n    heading: 1.125,\r\n  },\r\n  colors: {\r\n    // background color\r\n    background: '#ffffff',\r\n    // box container colors\r\n    boxBorder: '#ffffff',\r\n    boxBackground: 'gold',\r\n    // app title text colors\r\n    titleText1: 'blue',\r\n    titleText2: 'white',\r\n    titleText3: 'red',\r\n    // text colors\r\n    text: '#392a25',\r\n    textWhite: '#ffffff',\r\n    placeHolderText: '#8a8a5c',\r\n    counterText: '#8a8a5c',\r\n    searchText: '#8a8a5c',\r\n    optionsText: '#8a8a5c',\r\n    muted: '#aaaaaa',\r\n    // button colors\r\n    buttons1: '#62c03b',\r\n    buttons2: '#34aadc',\r\n    buttons3: '#ff70b3',\r\n    buttonText: '#ffffff',\r\n    buttonText2: '#000000',\r\n    buttonsClicked: '#ff70b3',\r\n    // checkbox colors\r\n    checkboxBorder: '#174A41',\r\n    // option box colors\r\n    optionBoxBackground: '#000000',\r\n    // search filter colors\r\n    searchFilterBackground: '#000000',\r\n    // input fields colors\r\n    inputBackground: '#000000',\r\n    inputBorder: '#000000',\r\n    inputBorderFocus: '#34aadc',\r\n    inputBorderEditOn: 'green',\r\n    // statistics fields colors\r\n    counterAll: '#000000',\r\n    counterInProgress: '#000000',\r\n    counterCompleted: '#000000',\r\n    counterPercentage: '#000000',\r\n    // task detail show colors\r\n    taskDetailBackground: '#F0E68C',\r\n    taskDetailContentBackground: 'burlywood',\r\n    taskDetailBorderColor: '#000000',\r\n    // bulb switch colors\r\n    bulbOn: 'gold',\r\n    bulbOff: 'darkgrey',\r\n  },\r\n  space: [0, 4, 8, 16, 32, 48],\r\n  breakpoints: ['40em', '64em', '80em'],\r\n  styles: {\r\n    Layout: {\r\n      color: 'text',\r\n      backgroundColor: 'background',\r\n      fontFamily: 'body',\r\n      lineHeight: 'body',\r\n      \r\n    },\r\n    Container: {\r\n      maxWidth: 1160,\r\n      padding: 3,\r\n    },\r\n  },\r\n}\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\nconst TitleWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // backgroundColor: 'boxBackground',\r\n      // background: `${taskBackground}`,\r\n      opacity: `${boxOpacity}`,\r\n      color: 'text',\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      marginTop: 'auto',\r\n      padding: 3,\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default TitleWrapper\r\n","export default __webpack_public_path__ + \"static/media/bubbles9.887b33c1.jpg\";","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, ThemeProvider, Container } from 'theme-ui'\r\nimport Footer from '../molecules/Footer'\r\nimport TitleStats from './TitleStats'\r\nimport blackboard from '../../assets/b4769e3a52766f30e86b375391c84441.jpg'\r\nimport TitleText from '../atoms/TitleText'\r\nimport ThoughtBoard from './ThoughtBoard'\r\nimport {\r\n  titlePart1Txt,\r\n  titlePart2Txt,\r\n  titlePart3Txt,\r\n  footerYearTxt,\r\n  footerBrandnameTxt,\r\n} from '../../content/contentEng'\r\nimport { inputLengthState } from '../../functions/recoil'\r\nimport { useRecoilValue } from 'recoil'\r\nimport theme from '../../styles/themes/theme'\r\nimport TitleWrapper from '../containers/TitleWrapper'\r\nimport FooterWrapper from '../containers/FooterWrapper'\r\nimport background from \"../../assets/bubbles9.jpg\";\r\n\r\nconst TitleScreen = () => {\r\n  const inputLength = useRecoilValue(inputLengthState)\r\n\r\n  // dynamic character count\r\n  console.log(inputLength, 'dynamic character count')\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n       <Container sx={{backgroundImage: `url(${background})`,\r\n                      backgroundSize: 'cover',\r\n                      paddingTop: '20px'\r\n                      }}>           \r\n        <TitleWrapper\r\n          contentArea={\r\n            <TitleText\r\n              text1={titlePart1Txt}\r\n              text2={titlePart2Txt}\r\n              text3={titlePart3Txt}\r\n              marginBottom={2}\r\n            />\r\n          }\r\n        />\r\n        <ThoughtBoard imageUrl={blackboard} />\r\n        <TitleStats />\r\n        <FooterWrapper\r\n          contentArea={\r\n            <Footer year={footerYearTxt} brandName={footerBrandnameTxt} />\r\n          }\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default TitleScreen\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\n\r\nconst CreateWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      flexDirection: 'column',\r\n      background: 'box',\r\n      // backgroundColor: 'boxBackground',\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // background: `${taskBackground}`,\r\n      color: 'text',\r\n      opacity: `${boxOpacity}`,\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default CreateWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx } from 'theme-ui'\r\n\r\nconst CreateButtonsWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      flexWrap: 'wrap',\r\n      '@media screen and (max-width: 700px)': {\r\n        flexDirection: 'row',\r\n        alignItems: 'baseline',\r\n        justifyContent: 'baseline',\r\n      },\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default CreateButtonsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport { useSetRecoilState, useRecoilValue } from 'recoil'\r\nimport { useState } from 'react'\r\nimport { textInputState, todoListState } from '../../functions/recoil'\r\nimport ButtonPrimary from '../atoms/ButtonPrimary'\r\nimport { addTask } from '../../API/fetch'\r\nimport MediumText from '../atoms/MediumText'\r\nimport ButtonWithlink from '../atoms/ButtonWithLink'\r\nimport TextArea from '../atoms/TextArea'\r\nimport { handleOnChangeTargetValue, switchDisplayStateOnOff, timeStampFormatted } from '../../functions/functionStorage'\r\nimport {\r\n  openMenuBtnIcon,\r\n  addTaskBtnIcon,\r\n  goBackBtnIcon,\r\n} from '../../content/icons'\r\nimport {\r\n  todoCreatorTitleTxt,\r\n  todoCreatorPlaceholderTxt,\r\n  todoCreatorNotUpdatedYetTxt,\r\n} from '../../content/contentEng'\r\nimport {\r\n  buttonBackgroundType2,\r\n  buttonBackgroundType3,\r\n  buttonBackgroundType4,\r\n} from '../../styles/gradients'\r\nimport { bulbOff, bulbOn, off, on } from '../../variables/variablesStorage'\r\nimport CreateWrapper from '../containers/CreateWrapper'\r\nimport CreateButtonsWrapper from '../containers/CreateButtonsWrapper'\r\nimport { userId } from '../../API/variables'\r\n\r\nconst TodoItemCreator = () => {\r\n  //for display control\r\n  const [creatorBtnMenu, setCreatorBtnMenu] = useState(on)\r\n  const [creatorBtnAdd, setCreatorBtnAdd] = useState(off)\r\n  const [creatorBtnBack, setCreatorBtnBack] = useState(off)\r\n  const [creatorBtnMenuLight, setCreatorBtnMenuLight] = useState(bulbOff)\r\n  //\r\n  const [textareaDisplay, setTextareaDisplay] = useState('')\r\n  const setTodoList = useSetRecoilState(todoListState)\r\n  const setInput = useSetRecoilState(textInputState)\r\n  const getInput = useRecoilValue(textInputState)\r\n\r\n  //add new task handle\r\n  const addItem = (title) => {\r\n    const todoData = {\r\n      id: getId(),\r\n      user_id: userId,\r\n      title: title,\r\n      completed: false,\r\n      created_at: timeStampFormatted(),\r\n      updated_at: todoCreatorNotUpdatedYetTxt,\r\n    }\r\n\r\n    // no empty input validator\r\n    if (todoData.title.length > 0) {\r\n      setTodoList((oldTodoList) => [...oldTodoList, todoData])\r\n      setInput('')\r\n      addTask(todoData)\r\n      setTextareaDisplay('')\r\n    }\r\n  }\r\n\r\n  // onblur handler to avoid input lag, so far could not move it to functionStorage.js only works without import here??\r\n  const handleOnBlur = () => {\r\n    setTimeout(() => {\r\n      setInput(textareaDisplay)\r\n    }, 0)\r\n  }  \r\n\r\n  // popup menu control\r\n  const handleTaskMenuOpenCloseBtn = () => {\r\n    switchDisplayStateOnOff(setCreatorBtnMenu, on)\r\n    switchDisplayStateOnOff(setCreatorBtnAdd, off)\r\n    setCreatorBtnBack(off)\r\n\r\n    setTimeout(() => {\r\n      if (creatorBtnAdd === 'none') {\r\n        switchDisplayStateOnOff(setCreatorBtnMenu, on)\r\n        switchDisplayStateOnOff(setCreatorBtnAdd, on)\r\n        setCreatorBtnBack(on)\r\n        setCreatorBtnMenuLight(bulbOn)\r\n      } else {\r\n        setCreatorBtnMenuLight(bulbOff)\r\n        switchDisplayStateOnOff(setCreatorBtnMenu, on)\r\n        switchDisplayStateOnOff(setCreatorBtnAdd, off)\r\n        setCreatorBtnBack(off)\r\n      }\r\n    }, 10)\r\n  }\r\n\r\n  return (\r\n    <CreateWrapper\r\n      contentArea={\r\n        <>\r\n          <MediumText text={todoCreatorTitleTxt} marginBottom={2} />\r\n          <TextArea\r\n            textareaBorderFocusColor={'inputBorderFocus'}\r\n            value={textareaDisplay}\r\n            onBlur={handleOnBlur}\r\n            onChange={handleOnChangeTargetValue(setTextareaDisplay)}\r\n            backgroundColor={`inputBackground`}\r\n            placeholder={todoCreatorPlaceholderTxt}\r\n          />\r\n          <CreateButtonsWrapper\r\n            contentArea={\r\n              <>\r\n                <ButtonPrimary\r\n                  text={openMenuBtnIcon}\r\n                  onClick={handleTaskMenuOpenCloseBtn}\r\n                  color={creatorBtnMenuLight}\r\n                  backgroundColor={buttonBackgroundType4}\r\n                  displayIt={creatorBtnMenu}\r\n                />\r\n                <ButtonPrimary\r\n                  onClick={() => addItem(getInput)}\r\n                  text={addTaskBtnIcon}\r\n                  backgroundColor={buttonBackgroundType2}\r\n                  displayIt={creatorBtnAdd}\r\n                />\r\n                <ButtonWithlink\r\n                  to={`home`}\r\n                  text={goBackBtnIcon}\r\n                  backgroundColor={buttonBackgroundType3}\r\n                  displayIt={creatorBtnBack}\r\n                />\r\n              </>\r\n            }\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\n// utility for creating unique Id\r\nlet id = 0\r\nconst getId = () => {\r\n  return id++\r\n}\r\n\r\nexport default TodoItemCreator\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx, Label, Select } from 'theme-ui'\r\n\r\nconst OptionBox = ({ onChange, options, value, labelText }) => (\r\n  <Flex>\r\n    <Label\r\n      sx={{\r\n        flexDirection: `column`,\r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',\r\n        fontSize: [`12, 14, 16`],\r\n        margin: 0,\r\n      }}\r\n    >\r\n      {labelText}\r\n      <Select\r\n        onChange={onChange}\r\n        value={value}\r\n        sx={{\r\n          backgroundColor: `optionBoxBackground`,\r\n          borderRadius: '4px',\r\n          border: '2px solid',\r\n          borderColor: 'inputBorder',\r\n          color: `optionsText`,\r\n          display: 'inline-block',\r\n          fontFamily: 'heading',\r\n          fontSize: [0, 1],\r\n          fontWeight: 'bold',\r\n          marginBottom: 1,\r\n          px: 3, // shorthand for defining padding-left and padding-right\r\n          py: 2, // shorthand for defining padding-top and padding-bottom\r\n          textDecoration: 'none',\r\n          // textTransform: 'uppercase',\r\n          '&:hover, &:focus': {\r\n            backgroundColor: 'foreground',\r\n            border: '2px solid',\r\n            borderColor: 'inputBorderFocus',\r\n            outline: 'none !important',\r\n          },\r\n        }}\r\n      >\r\n        {options.map((el) => (\r\n          <option key={el} value={`${el}`}>\r\n            {el}\r\n          </option>\r\n        ))}\r\n      </Select>\r\n    </Label>\r\n  </Flex>\r\n)\r\n\r\nexport default OptionBox\r\n","/* eslint-disable */\r\nimport { useRecoilState } from 'recoil'\r\nimport { todoListFilterState } from '../../functions/recoil'\r\nimport OptionBox from '../molecules/OptionBox'\r\nimport { handleOnChangeTargetValue } from '../../functions/functionStorage'\r\nimport { filteredOptions } from '../../variables/variablesStorage'\r\n\r\nconst TodoListFilters = () => {\r\n  const [filter, setFilter] = useRecoilState(todoListFilterState)\r\n\r\n  return <OptionBox options={filteredOptions} value={filter} onChange={handleOnChangeTargetValue(setFilter)} />\r\n}\r\n\r\nexport default TodoListFilters\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\n\r\nconst StatsWrapper = ({ contentArea }) => (\r\n  <div\r\n    sx={{\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // backgroundColor: 'boxBackground',\r\n      // background: `${taskBackground}`,\r\n      opacity: `${boxOpacity}`,\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default StatsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport { useRecoilValue } from 'recoil'\r\nimport { todoListStatsState } from '../../functions/recoil'\r\nimport ProgressCounter from '../atoms/ProgressCounter'\r\nimport MediumText from '../atoms/MediumText'\r\nimport {\r\n  todoActionStatsTitleTxt,\r\n  todoActionStatsTotalTxt,\r\n  todoActionStatsCompletedTxt,\r\n  todoActionStatsInProgressTxt,\r\n} from '../../content/contentEng'\r\nimport StatsWrapper from '../containers/StatsWrapper'\r\n\r\nconst TodoListStats = () => {\r\n  const { totalNum, totalCompletedNum, totalUncompletedNum } =\r\n    useRecoilValue(todoListStatsState)\r\n\r\n  return (\r\n    <StatsWrapper\r\n      contentArea={\r\n        <>\r\n          <MediumText text={todoActionStatsTitleTxt} marginBottom={2} />\r\n          <ProgressCounter\r\n            text={`${todoActionStatsTotalTxt} ${totalNum}`}\r\n            borderColor={'boxBorder'}\r\n            color={'counterText'}\r\n            backgroundColor={'counterAll'}\r\n          />\r\n          <ProgressCounter\r\n            text={`${todoActionStatsCompletedTxt} ${totalCompletedNum}`}\r\n            borderColor={'boxBorder'}\r\n            color={'counterText'}\r\n            backgroundColor={'counterCompleted'}\r\n          />\r\n          <ProgressCounter\r\n            text={`${todoActionStatsInProgressTxt} ${totalUncompletedNum}`}\r\n            borderColor={'boxBorder'}\r\n            color={'counterText'}\r\n            backgroundColor={'counterInProgress'}\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default TodoListStats\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, Input, jsx, Label } from 'theme-ui'\r\n\r\nconst SearchField = ({\r\n  type,\r\n  placeholder,\r\n  value,\r\n  labelText,\r\n  onChange,\r\n  id,\r\n  onBlur,\r\n}) => (\r\n  <Flex>\r\n    <Label\r\n      sx={{\r\n        flexDirection: `column`,\r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',\r\n        fontSize: [`12, 14, 16`],\r\n        margin: 0,\r\n      }}\r\n    >\r\n      {labelText}\r\n      <Input\r\n        id={id}\r\n        value={value}\r\n        onChange={onChange}\r\n        onBlur={onBlur}\r\n        type={type}\r\n        placeholder={placeholder}\r\n        sx={{\r\n          backgroundColor: `searchFilterBackground`,\r\n          borderRadius: '4px',\r\n          border: '2px solid',\r\n          borderColor: 'inputBorder',\r\n          color: `searchText`,\r\n          display: 'inline-block',\r\n          fontFamily: 'heading',\r\n          fontSize: [1, 2],\r\n          fontWeight: 'bold',\r\n          marginBottom: 1,\r\n          px: 3, // shorthand for defining padding-left and padding-right\r\n          py: 2, // shorthand for defining padding-top and padding-bottom\r\n          textDecoration: 'none',\r\n          // textTransform: 'uppercase',\r\n          '&:hover, &:focus': {\r\n            backgroundColor: `searchFilterBackground`,\r\n            border: '2px solid',\r\n            borderColor: 'inputBorderFocus',\r\n            outline: 'none !important',\r\n          },\r\n          '&::placeholder': { color: 'placeHolderText' },\r\n        }}\r\n      ></Input>\r\n    </Label>\r\n  </Flex>\r\n)\r\n\r\nexport default SearchField\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n \r\nconst ListWrapper = ({ contentArea }) => (\r\n  <div\r\n    sx={{\r\n      display: 'flex',\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // backgroundColor: 'boxBackground',\r\n      // background: `${taskBackground}`,\r\n      opacity: `${boxOpacity}`,\r\n      color: 'text',\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n      flexDirection: 'column',\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default ListWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\n\r\nconst ItemFilteredWrapper = ({ contentArea }) => (\r\n  <Flex sx={{ flexWrap: 'wrap' }}>{contentArea}</Flex>\r\n)\r\n\r\nexport default ItemFilteredWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst BigText = ({ text, color, marginBottom, backgroundColor }) => (\r\n  <h2\r\n    sx={{\r\n      backgroundColor: `${backgroundColor}`,\r\n      fontFamily: 'heading',\r\n      fontWeight: 'heading',\r\n      color: `${color}`,\r\n      fontSize: [3, 4, 5],\r\n      margin: 0,\r\n      marginBottom: `${marginBottom}`,\r\n    }}\r\n  >\r\n    {text}\r\n  </h2>\r\n)\r\n\r\nexport default BigText\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\nimport {\r\n  buttonBackgroundType1,\r\n  buttonBackgroundType3,\r\n} from '../../styles/gradients'\r\nimport ButtonPrimary from '../atoms/ButtonPrimary'\r\nimport MediumText from '../atoms/MediumText'\r\n\r\nconst YesNoPopup = ({\r\n  onClickYes,\r\n  onClickNo,\r\n  messageText,\r\n  yesText,\r\n  noText,\r\n}) => (\r\n  <Flex\r\n    sx={{\r\n      alignItems: 'center',\r\n      justifyContent: 'space-between',\r\n      flexDirection: 'row',\r\n      width: '100%',\r\n      '@media screen and (max-width: 700px)': {\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    }}\r\n  >\r\n    <ButtonPrimary\r\n      text={yesText}\r\n      onClick={onClickYes}\r\n      backgroundColor={buttonBackgroundType1}\r\n    />\r\n    <MediumText\r\n      marginBottom={2}\r\n      marginTop={2}\r\n      text={messageText}\r\n      display={'flex'}\r\n      alignSelf={'center'}\r\n    />\r\n    <ButtonPrimary\r\n      text={noText}\r\n      onClick={onClickNo}\r\n      backgroundColor={buttonBackgroundType3}\r\n    />\r\n  </Flex>\r\n)\r\n\r\nexport default YesNoPopup\r\n","export default __webpack_public_path__ + \"static/media/bubbles4.1ed83b0d.jpg\";","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\nimport { taskDetailsBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders } from '../../styles/themes/settings'\r\nimport background2 from \"../../assets/bubbles4.jpg\";\r\n\r\n\r\nconst TaskDetailsWrapper = ({ contentArea, displayIt = 'flex', height = 0, padding }) => (\r\n  <div\r\n    sx={{\r\n      // display: `${displayIt}`,\r\n      display: `flex`,\r\n      height: `${height}`,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      alignSelf: 'center',\r\n      backgroundImage: `url(${background2})`,\r\n      backgroundSize: 'cover',\r\n      // background: `${taskDetailsBackground}`,\r\n      color: 'text',\r\n      border: `none`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontFamily: 'body',\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: `${padding}`,\r\n      paddingLeft: 3,\r\n      paddingRight: 3,\r\n      transition: '0.5s',\r\n      maxHeight: '100%'\r\n    }}\r\n  >\r\n    <Flex sx={{ flexDirection: 'column' }}>{contentArea}</Flex>\r\n  </div>\r\n)\r\n\r\nexport default TaskDetailsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { detailsBorderRadius } from '../../styles/themes/settings'\r\n\r\nconst DisplayDetailsText = ({\r\n  headText,\r\n  contentText,\r\n  marginTop,\r\n  marginBottom,\r\n  backgroundColor,\r\n  displayIt\r\n}) => (\r\n  <div\r\n    sx={{\r\n      display: `${displayIt}`,\r\n      wordBreak: 'break-word',\r\n      alignSelf: `center`,\r\n      flexDirection: 'column',\r\n      marginTop: `${marginTop}`,\r\n      marginBottom: `${marginBottom}`,\r\n      textAlign: 'center',\r\n      //backgroundColor: `${backgroundColor}`,\r\n      background: `${backgroundColor}`,\r\n      width: '100%',\r\n      padding: 2,\r\n      border: '2px solid',\r\n      borderColor: 'taskDetailBorderColor',\r\n      borderRadius: detailsBorderRadius,\r\n      fontSize: [1, 4],\r\n    }}\r\n  >\r\n    <span sx={{ fontWeight: 'heading' }}>{headText}</span>\r\n    {contentText}\r\n  </div>\r\n)\r\n\r\nexport default DisplayDetailsText\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst TaskDetailBtnWrapper = ({ contentArea, displayIt }) => (\r\n  <div\r\n    sx={{\r\n      display: `${displayIt}`,\r\n      justifyContent: 'center',\r\n      alignSelf: 'center',\r\n      width: '100%',\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default TaskDetailBtnWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport ButtonPrimary from '../atoms/ButtonPrimary'\r\nimport TaskDetailsWrapper from '../containers/TaskDetailsWrapper'\r\nimport {\r\n  taskDetailsTaskNumberTxt,\r\n  taskDetailsTaskContentTxt,\r\n  taskDetailsStatusTxt,\r\n  taskDetailsTimeStartedTxt,\r\n  taskDetailsTimeUpdatedTxt,\r\n  taskDetailsInProgressTxt,\r\n  taskDetailsCompletedTxt,\r\n} from '../../content/contentEng'\r\nimport { hideDetailsBtnIcon } from '../../content/icons'\r\nimport DisplayDetailsText from '../atoms/DisplayDetailsText'\r\nimport TaskDetailBtnWrapper from '../containers/TaskDetailBtnWrapper'\r\nimport {\r\n  buttonBackgroundType3,\r\n  taskDetailsDetailBackground,\r\n} from '../../styles/gradients'\r\n\r\nconst TaskDetails = ({ clickClose, displayIt = 'none', taskData, height }) => {\r\n  let getTask = taskData\r\n  const updated = getTask.updated_at\r\n  let updateDisplay = \"\"\r\n\r\n  // convert task completion status from true/false to success/in progress text\r\n  let completionText = ''\r\n  if (getTask.completed === true) {\r\n    completionText = taskDetailsCompletedTxt\r\n  } else {\r\n    completionText = taskDetailsInProgressTxt\r\n  }\r\n\r\n  if (updated === undefined) {\r\n    updateDisplay = \"Not updated yet\"\r\n  }\r\n  else {\r\n    updateDisplay = updated\r\n  }\r\n\r\n  setTimeout(() => {\r\n    console.log(getTask)\r\n\r\n  }, 1000)\r\n\r\n  return (\r\n    <TaskDetailsWrapper\r\n      height={height}\r\n      displayIt={displayIt}\r\n      contentArea={\r\n        <>\r\n          <DisplayDetailsText\r\n            displayIt={displayIt}\r\n            headText={taskDetailsTaskNumberTxt}\r\n            contentText={getTask.id}\r\n            marginTop={1}\r\n            marginBottom={1}\r\n            backgroundColor={taskDetailsDetailBackground}\r\n          />\r\n          <DisplayDetailsText\r\n            displayIt={displayIt}\r\n            headText={taskDetailsTaskContentTxt}\r\n            contentText={getTask.title}\r\n            marginTop={2}\r\n            marginBottom={2}\r\n            backgroundColor={taskDetailsDetailBackground}\r\n          />\r\n          <DisplayDetailsText\r\n            displayIt={displayIt}\r\n            headText={taskDetailsStatusTxt}\r\n            contentText={completionText}\r\n            marginTop={2}\r\n            marginBottom={2}\r\n            backgroundColor={taskDetailsDetailBackground}\r\n          />\r\n          <DisplayDetailsText\r\n            displayIt={displayIt}\r\n            headText={taskDetailsTimeStartedTxt}\r\n            contentText={getTask.due_on}\r\n            marginTop={2}\r\n            marginBottom={2}\r\n            backgroundColor={taskDetailsDetailBackground}\r\n          />\r\n          <DisplayDetailsText\r\n            displayIt={displayIt}\r\n            headText={taskDetailsTimeUpdatedTxt}\r\n            contentText={updateDisplay}\r\n            marginTop={2}\r\n            marginBottom={2}\r\n            backgroundColor={taskDetailsDetailBackground}\r\n          />\r\n          <TaskDetailBtnWrapper\r\n            displayIt={displayIt}\r\n            contentArea={\r\n              <ButtonPrimary\r\n                text={hideDetailsBtnIcon}\r\n                backgroundColor={buttonBackgroundType3}\r\n                onClick={clickClose}\r\n                marginTop={1}\r\n                marginBottom={1}\r\n              />\r\n            }\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default TaskDetails\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst ButtonsWrapper = ({ contentArea, displayStyle, alignSelf }) => (\r\n  <div\r\n    sx={{\r\n      display: `${displayStyle}`,\r\n      flexWrap: 'wrap',\r\n      flexDirection: 'row',\r\n      justifyContent: 'space-between',\r\n      alignSelf: `${alignSelf}`,\r\n      width: '100%',\r\n      '@media screen and (max-width: 700px)': {\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default ButtonsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\nimport { taskBackground } from '../../styles/gradients'\r\nimport { generalBorderRadius, borders, boxOpacity } from '../../styles/themes/settings'\r\nimport background3 from \"../../assets/poly4.webp\";\r\n\r\n\r\nconst ItemWrapper = ({ contentArea }) => (\r\n  <div\r\n    sx={{\r\n      backgroundImage: `url(${background3})`,\r\n      backgroundSize: 'cover',\r\n      // background: 'box',\r\n      // backgroundColor: 'boxBackground',\r\n      // background: `${taskBackground}`,\r\n      opacity: `${boxOpacity}`,\r\n      color: 'text',\r\n      border: `${borders}`,\r\n      borderColor: 'boxBorder',\r\n      borderRadius: generalBorderRadius,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default ItemWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui'\r\n\r\nconst ItemStatusWrapper = ({ contentArea }) => (\r\n  <div\r\n    sx={{\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n      marginBottom: 2,\r\n      '@media screen and (max-width: 700px)': {\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </div>\r\n)\r\n\r\nexport default ItemStatusWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\n\r\nconst ItemButtonsWrapper = ({ contentArea }) => (\r\n  <Flex\r\n    sx={{\r\n      flexWrap: 'wrap',\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      '@media screen and (max-width: 700px)': {\r\n        flexDirection: 'row',\r\n        alignItems: 'baseline',\r\n        justifyContent: 'baseline',\r\n      },\r\n    }}\r\n  >\r\n    {contentArea}\r\n  </Flex>\r\n)\r\n\r\nexport default ItemButtonsWrapper\r\n","/* eslint-disable */\r\n/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport React from 'react'\r\nimport { jsx } from 'theme-ui'\r\nimport { useRecoilState, useSetRecoilState, useRecoilValue } from 'recoil'\r\nimport { useState, useEffect } from 'react'\r\nimport { textInputState, todoListState } from '../../functions/recoil'\r\nimport ButtonPrimary from '../atoms/ButtonPrimary'\r\nimport { deleteTask, updateTask } from '../../API/fetch'\r\nimport MediumText from '../atoms/MediumText'\r\nimport BigText from '../atoms/BigText'\r\nimport TextArea from '../atoms/TextArea'\r\nimport { \r\n  replaceItemAtIndex,\r\n  removeItemAtIndex,\r\n  timeStampFormatted,\r\n  switchDisplayStateOnOff,\r\n  handleOnBlur\r\n} from '../../functions/functionStorage'\r\nimport YesNoPopup from '../molecules/YesNoPopup'\r\nimport TaskDetails from './TaskDetails'\r\nimport ButtonsWrapper from '../containers/ButtonsWrapper'\r\nimport {\r\n  openMenuBtnIcon,\r\n  detailsBtnIcon,\r\n  editBtnIcon,\r\n  statusBtnIcon,\r\n  deleteBtnIcon,\r\n  declineBtnIcon,\r\n  confirmBtnIcon,\r\n} from '../../content/icons'\r\nimport {\r\n  buttonBackgroundType1,\r\n  buttonBackgroundType2,\r\n  buttonBackgroundType3,\r\n  buttonBackgroundType4,\r\n} from '../../styles/gradients'\r\nimport {\r\n  deleteYesNoMessage,\r\n  editYesNoMessage,\r\n  statusYesNoMessage,\r\n  taskNumberText,\r\n  todoItemStatusCompletedText,\r\n  todoItemStatusInProgressText  \r\n} from '../../content/contentEng'\r\nimport { bulbOff, bulbOn, empty, off, on } from '../../variables/variablesStorage'\r\nimport ItemWrapper from '../containers/ItemWrapper'\r\nimport ItemStatusWrapper from '../containers/ItemStatusWrapper'\r\nimport ItemButtonsWrapper from '../containers/ItemButtonsWrapper'\r\n\r\nconst TodoItem = ({ item }) => {\r\n  // init data\r\n  const initialTitleDisplay = item.title\r\n  const todoItemPrevious = item\r\n\r\n  // initial padding for task details to make it invisible when off\r\n  const [detailsPadding, setDetailsPadding] = useState(0)\r\n  // task details animation\r\n  const [detailsHeight, setDetailsHeight] = useState(\"0\")\r\n  // takes whole list from recoilState\r\n  const [todoList, setTodoList] = useRecoilState(todoListState)\r\n  // index finder\r\n  const index = todoList.findIndex((listItem) => listItem === item)\r\n  // initial and updated task data\r\n  const [initTaskData, setInitTaskData] = useState(item)\r\n  const [updatedData, setUpdatedData] = useState(todoItemPrevious)\r\n  // toggle textarea enabled or disabled\r\n  const [disabled, setDisabled] = useState(true)\r\n  // textarea\r\n  const [textareaDisplay, setTextareaDisplay] = useState(initialTitleDisplay)\r\n  // buttons active or not\r\n  const [taskBtnMenu, setTaskBtnMenu] = useState(on)\r\n  const [taskBtnEdit, setTaskBtnEdit] = useState(off)\r\n  const [taskBtnStatus, setTaskBtnStatus] = useState(off)\r\n  const [taskBtnDelete, setTaskBtnDelete] = useState(off)\r\n  const [taskBtnDetails, setTaskBtnDetails] = useState(off)\r\n  const [taskBtnMenuLight, setTaskBtnMenuLight] = useState(bulbOff)\r\n  // yes no popups active or not\r\n  const [yesNoEditPopup, setYesNoEditPopup] = useState(off)\r\n  const [yesNoDeletePopup, setYesNoDeletePopup] = useState(off)\r\n  const [yesNoStatusPopup, setYesNoStatusPopup] = useState(off)\r\n  // views active or not\r\n  const [taskDetailView, setTaskDetailView] = useState(off)\r\n  const [taskStatusView, setTaskStatusView] = useState(on)\r\n  // set border color for textarea when edited or not\r\n  const [textareaBorderColor, setTextareaBorderColor] = useState('inputBorder')\r\n  const [textareaBorderFocusColor, setTextareaBorderFocusColor] =\r\n    useState('inputBorder')\r\n  // set dynamic character count\r\n  const setInput = useSetRecoilState(textInputState)\r\n \r\n\r\n  // data to retrieve initial input if edit cancelled\r\n  useEffect(() => {  \r\n    const todoDataInit = {\r\n      id: item.id,\r\n      user_id: item.user_id,\r\n      title: item.title,\r\n      completed: item.completed,\r\n      due_on: item.due_on,\r\n      updated_at: item.updated_at,\r\n    }\r\n    setInitTaskData(todoDataInit)\r\n  }, [item])\r\n\r\n  // when edit button clicked\r\n  const handleUpdateBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, off)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, off)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, off)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, off)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, off)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, on)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, false)\r\n    switchDisplayStateOnOff(setTaskDetailView,off) \r\n    setTextareaBorderColor('inputBorderEditon')\r\n    setTextareaBorderFocusColor('inputBorderFocus')\r\n  }\r\n\r\n  // when edit cancelled\r\n  const handleUpdateNoBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)\r\n    setTextareaDisplay(todoList[index].title)    \r\n    setTextareaBorderColor('inputBorder')\r\n    setTextareaBorderFocusColor('inputBorder')\r\n    setUpdatedData(initTaskData)\r\n  }\r\n\r\n  // edit dynamic content value on change\r\n  const editItemText = ({ target: { value } }) => {\r\n    const todoDataMod = {\r\n      id: item.id,\r\n      user_id: item.user_id,\r\n      title: value,\r\n      completed: item.completed,\r\n      due_on: item.due_on,\r\n      updated_at: timeStampFormatted(),\r\n    }\r\n    setTextareaDisplay(todoDataMod.title)\r\n    setUpdatedData(todoDataMod)\r\n  }\r\n\r\n  // commit edit changes on click\r\n  const confirmEditChanges = (todoDataMod) => {\r\n    if (\r\n      updatedData.title === '' ||\r\n      updatedData.title === null ||\r\n      updatedData.title === undefined\r\n    ) {\r\n      setTaskBtnEdit(on)\r\n      setYesNoEditPopup(off)\r\n      setTaskBtnEdit(off)\r\n      setYesNoEditPopup(on)\r\n    } else {\r\n      updateTask(item.id, todoDataMod)\r\n      setInitTaskData(item)\r\n      const newList = replaceItemAtIndex(todoList, index, {\r\n        ...item,\r\n        title: todoDataMod.title,\r\n        updated_at: timeStampFormatted(),\r\n      })\r\n      setTodoList(newList)\r\n      switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n      switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n      switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n      switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n      switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n      switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n      switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n      switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n      switchDisplayStateOnOff(setDisabled, true)\r\n      switchDisplayStateOnOff(setTaskDetailView, off)   \r\n      setTextareaBorderColor('inputBorder')\r\n      setTextareaBorderFocusColor('inputBorder')\r\n    }\r\n  }\r\n\r\n  // when change status button clicked\r\n  const handleChangeStatusBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, off)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, off)\r\n    switchDisplayStateOnOff(setTaskBtnDelete,off)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, off)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, off)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, on)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off) \r\n  }\r\n\r\n  // when status changed and answer 'yes' to confirmation question\r\n  const handleStatusChangeConfirm = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)   \r\n    toggleItemCompletion()\r\n  }\r\n\r\n  // when status changed and answer 'no' to confirmation question\r\n  const handleStatusChangeDeny = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)   \r\n  }\r\n\r\n  // update task comletion status\r\n  const toggleItemCompletion = () => {\r\n    const newList = replaceItemAtIndex(todoList, index, {\r\n      ...item,\r\n      completed: !item.completed,\r\n      updated_at: timeStampFormatted(),\r\n    })\r\n    const todoDataModCheck = {\r\n      id: item.id,\r\n      user_id: item.user_id,\r\n      title: item.title,\r\n      completed: !item.completed,\r\n      due_on: item.due_on,\r\n      updated_at: timeStampFormatted(),\r\n    }\r\n    updateTask(item.id, todoDataModCheck)\r\n    setTodoList(newList)\r\n    setUpdatedData(todoDataModCheck)\r\n  }\r\n\r\n  // delete item on click, assigned to delete popup 'confirm' button\r\n  const deleteItem = () => {\r\n    deleteTask(item.id)\r\n    const newList = removeItemAtIndex(todoList, index)\r\n    setTodoList(newList)\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)\r\n  }\r\n\r\n  // after clicking delete button\r\n  const handleDeleteBtnClick = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, off)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, off)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, off)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, off)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, off)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, on)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off) \r\n  }\r\n\r\n  // after clicking delete confirm button\r\n  const handleDeleteBtnYesClick = () => {\r\n    deleteItem()\r\n  }\r\n\r\n  // after clicking delete no - 'go back' button\r\n  const handleDeleteBtnNoClick = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)  \r\n  }\r\n\r\n  // after clicking show details\r\n  const handleShowDetailsBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, off)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, off)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, off)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, off)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, off)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskStatusView, off)  \r\n    setDetailsHeight(\"650px\")  \r\n    setDetailsPadding(3)\r\n    setTimeout(() => {\r\n      switchDisplayStateOnOff(setTaskDetailView, on)\r\n    }, 300)  \r\n  }\r\n\r\n  // after clicking close details\r\n  const handleCloseDetailsBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)\r\n    switchDisplayStateOnOff(setTaskStatusView, on)\r\n    setDetailsHeight(\"0\")\r\n    setDetailsPadding(0)\r\n  }\r\n\r\n  // item completed/in progress to display\r\n  const itemStatusDisplay = (completedData) => {\r\n    if (completedData === true) {\r\n      return todoItemStatusCompletedText\r\n    } else {\r\n      return todoItemStatusInProgressText\r\n    }\r\n  }\r\n\r\n  // popup menu control\r\n  const handleTaskMenuOpenCloseBtn = () => {\r\n    switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n    switchDisplayStateOnOff(setTaskBtnEdit, off)\r\n    switchDisplayStateOnOff(setTaskBtnDelete, off)\r\n    switchDisplayStateOnOff(setTaskBtnDetails, off)\r\n    switchDisplayStateOnOff(setTaskBtnStatus, off)\r\n    switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n    switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n    switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n    switchDisplayStateOnOff(setDisabled, true)\r\n    switchDisplayStateOnOff(setTaskDetailView, off)\r\n   \r\n    setTimeout(() => {\r\n      if (taskBtnEdit === 'none') {\r\n        switchDisplayStateOnOff(setTaskBtnMenu, on)\r\n        switchDisplayStateOnOff(setTaskBtnEdit, on)\r\n        switchDisplayStateOnOff(setTaskBtnDelete, on)\r\n        switchDisplayStateOnOff(setTaskBtnDetails, on)\r\n        switchDisplayStateOnOff(setTaskBtnStatus, on)\r\n        switchDisplayStateOnOff(setYesNoDeletePopup, off)\r\n        switchDisplayStateOnOff(setYesNoEditPopup, off)\r\n        switchDisplayStateOnOff(setYesNoStatusPopup, off)\r\n        switchDisplayStateOnOff(setDisabled, true)\r\n        switchDisplayStateOnOff(setTaskDetailView, off)     \r\n        setTaskBtnMenuLight(bulbOn)\r\n      } else {\r\n        setTaskBtnMenuLight(bulbOff)\r\n      }\r\n    }, 10)\r\n  }\r\n\r\n  console.log(detailsPadding, \"detpad\")\r\n\r\n  return (\r\n    <ItemWrapper\r\n      contentArea={\r\n        <>\r\n          <BigText text={`${taskNumberText} # ${item.id}:`} marginBottom={2} />\r\n          {/* display with task title*/}\r\n          <TextArea\r\n            disabled={disabled}\r\n            value={textareaDisplay}\r\n            onBlur={() => handleOnBlur(setInput, textareaDisplay)}\r\n            textareaBorderColor={textareaBorderColor}\r\n            textareaBorderFocusColor={textareaBorderFocusColor}\r\n            onChange={editItemText}\r\n            backgroundColor={`inputBackground`}\r\n          />\r\n          <ItemStatusWrapper\r\n            contentArea={\r\n              <MediumText\r\n                text={itemStatusDisplay(item.completed)}\r\n                display={taskStatusView}\r\n              />\r\n            }\r\n          />\r\n          <ItemButtonsWrapper\r\n            contentArea={\r\n              <>\r\n                {/* open close task options */}\r\n                <ButtonPrimary\r\n                  text={openMenuBtnIcon}\r\n                  onClick={handleTaskMenuOpenCloseBtn}\r\n                  color={taskBtnMenuLight}\r\n                  backgroundColor={buttonBackgroundType4}\r\n                  displayIt={taskBtnMenu}\r\n                />\r\n                {/* show details button */}\r\n                <ButtonPrimary\r\n                  height={'10px'}\r\n                  onClick={handleShowDetailsBtn}\r\n                  displayIt={taskBtnDetails}\r\n                  text={detailsBtnIcon}\r\n                  backgroundColor={buttonBackgroundType1}\r\n                />\r\n                {/* update task button */}\r\n                <ButtonPrimary\r\n                  onClick={handleUpdateBtn}\r\n                  displayIt={taskBtnEdit}\r\n                  text={editBtnIcon}\r\n                  backgroundColor={buttonBackgroundType2}\r\n                />\r\n                {/* change status button*/}\r\n                <ButtonPrimary\r\n                  onClick={handleChangeStatusBtn}\r\n                  displayIt={taskBtnStatus}\r\n                  text={statusBtnIcon}\r\n                  backgroundColor={buttonBackgroundType2}\r\n                />\r\n                {/* delete button*/}\r\n                <ButtonPrimary\r\n                  onClick={handleDeleteBtnClick}\r\n                  displayIt={taskBtnDelete}\r\n                  text={deleteBtnIcon}\r\n                  backgroundColor={buttonBackgroundType3}\r\n                />\r\n              </>\r\n            }\r\n          />\r\n          {/* popup with choices yes or no for editing*/}\r\n          <ButtonsWrapper\r\n            displayStyle={yesNoEditPopup}\r\n            contentArea={\r\n              <YesNoPopup\r\n                onClickYes={() => confirmEditChanges(updatedData)}\r\n                onClickNo={handleUpdateNoBtn}\r\n                yesText={confirmBtnIcon}\r\n                noText={declineBtnIcon}\r\n                messageText={editYesNoMessage}\r\n              />\r\n            }\r\n          />\r\n          {/* popup with choices yes or no for delete*/}\r\n          <ButtonsWrapper\r\n            displayStyle={yesNoDeletePopup}\r\n            contentArea={\r\n              <YesNoPopup\r\n                onClickYes={handleDeleteBtnYesClick}\r\n                onClickNo={handleDeleteBtnNoClick}\r\n                yesText={confirmBtnIcon}\r\n                noText={declineBtnIcon}\r\n                messageText={deleteYesNoMessage}\r\n              />\r\n            }\r\n          />\r\n          {/* popup with choices yes or no for changing status*/}\r\n          <ButtonsWrapper\r\n            displayStyle={yesNoStatusPopup}\r\n            contentArea={\r\n              <YesNoPopup\r\n                onClickYes={handleStatusChangeConfirm}\r\n                onClickNo={handleStatusChangeDeny}\r\n                yesText={confirmBtnIcon}\r\n                noText={declineBtnIcon}\r\n                messageText={statusYesNoMessage}\r\n              />\r\n            }\r\n          />\r\n          <TaskDetails\r\n            padding={detailsPadding}\r\n            displayIt={taskDetailView}\r\n            height={detailsHeight}\r\n            taskData={updatedData}\r\n            clickClose={handleCloseDetailsBtn}\r\n          />\r\n        </>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\n\r\nexport default TodoItem\r\n","export default __webpack_public_path__ + \"static/media/bubbles2.889ee6ed.jpg\";","/* eslint-disable */\r\nimport React from 'react'\r\nimport { useRecoilState, useRecoilValue } from 'recoil'\r\nimport { useState, useEffect } from 'react'\r\nimport {\r\n  filteredTodoListState,\r\n  inputLengthState,\r\n  todoListState,\r\n} from '../../functions/recoil'\r\nimport TodoItemCreator from './TodoItemCreator'\r\nimport TodoListFilters from './TodoListFilters'\r\nimport TodoListStats from './TodoListStats'\r\nimport { ThemeProvider, Container, Box } from 'theme-ui'\r\nimport SearchField from '../atoms/SearchField'\r\nimport MediumText from '../atoms/MediumText'\r\nimport { CircleArrow as ScrollUpButton } from 'react-scroll-up-button'\r\nimport {\r\n  todoListTitleTxt,\r\n  todoListSearchPlaceholderTxt,\r\n} from '../../content/contentEng'\r\nimport theme from '../../styles/themes/theme'\r\nimport ListWrapper from '../containers/ListWrapper'\r\nimport ItemFilteredWrapper from '../containers/ItemFilteredWrapper'\r\nimport TodoItem from './TodoItem'\r\nimport { getTodos, handleOnChangeTargetValue } from '../../functions/functionStorage'\r\nimport background from \"../../assets/bubbles2.jpg\";\r\n\r\n\r\nconst TodoList = () => {\r\n  const [todos, setTodos] = useRecoilState(todoListState)\r\n  const inputLength = useRecoilValue(inputLengthState)\r\n  const [toSearch, setToSearch] = useState('')\r\n  const filteredData = useRecoilValue(filteredTodoListState)\r\n\r\n  // dynamic character count with recoil\r\n  console.log(inputLength, 'dynamic character count')\r\n\r\n\r\n  useEffect(() => {  \r\n    getTodos(setTodos)\r\n  }, [])\r\n\r\n  let filterData = filteredData.filter((item) => item.title.includes(toSearch))\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container sx={{backgroundImage: `url(${background})`,\r\n                      backgroundSize: 'auto',\r\n                      minHeight: '100vh',\r\n                      // backgroundRepeat: 'round',\r\n                      paddingTop: '20px'\r\n                      }}>\r\n        <TodoItemCreator />\r\n        <ListWrapper\r\n          contentArea={\r\n            <>\r\n              <MediumText text={todoListTitleTxt} marginBottom={2} />\r\n              <TodoListFilters />\r\n              <SearchField\r\n                type={'text'}\r\n                placeholder={todoListSearchPlaceholderTxt}\r\n                value={toSearch}\r\n                onChange={handleOnChangeTargetValue(setToSearch)}\r\n              />\r\n            </>\r\n          }\r\n        />\r\n        <TodoListStats />\r\n        <ScrollUpButton />\r\n        <ItemFilteredWrapper\r\n          contentArea={filterData.map((todoItem) => (\r\n            <Box key={todoItem.id} sx={{ width: ['100%'] }}>\r\n              <TodoItem item={todoItem} todos={todos} />\r\n            </Box>\r\n          ))}\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default TodoList\r\n","/* eslint-disable */\r\nimport {\r\n  BrowserRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom'\r\nimport TitleScreen from './components/recoilTodoList/TitleScreen'\r\nimport TodoList from './components/recoilTodoList/TodoList'\r\n\r\nconst App = () => (\r\n    <Router>\r\n      <Switch>\r\n        <Redirect exact from=\"/\" to=\"/home\" />\r\n        <Route path=\"/action\" component={TodoList} />\r\n        <Route path=\"/home\" component={TitleScreen} />\r\n        <TodoList />\r\n      </Switch>\r\n    </Router>\r\n  )\r\n\r\n\r\nexport default App\r\n","/* eslint-disable */\r\nconst reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","/* eslint-disable */\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { RecoilRoot } from 'recoil'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}