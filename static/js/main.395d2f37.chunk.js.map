{"version":3,"sources":["styles/themes/theme.js","components/molecules/Footer.js","content/contentEng.js","functions/recoil.js","components/atoms/ProgressCounter.js","components/atoms/MediumText.js","components/atoms/ButtonWithLink.js","API/variables.js","API/fetch.js","components/recoilTodoList/TitleStats.js","assets/b4769e3a52766f30e86b375391c84441.jpg","components/atoms/TitleText.js","functions/functionStorage.js","components/atoms/ButtonPrimary.js","components/atoms/TextArea.js","components/recoilTodoList/ThoughtBoard.js","components/recoilTodoList/TitleScreen.js","components/atoms/BigText.js","components/molecules/YesNoPopup.js","components/containers/TaskDetailsWrapper.js","components/atoms/DisplayDetailsText.js","components/containers/TaskDetailBtnWrapper.js","components/recoilTodoList/TaskDetails.js","components/containers/ButtonsWrapper.js","components/recoilTodoList/TodoItem.js","components/recoilTodoList/TodoItemCreator.js","components/molecules/OptionBox.js","components/recoilTodoList/TodoListFilters.js","components/recoilTodoList/TodoListStats.js","components/atoms/SearchField.js","components/recoilTodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["fonts","body","heading","blackboard","fontSizes","fontWeights","blackboardThick","lineHeights","colors","background","boxBorder","boxBackground","titleText1","titleText2","titleText3","text","textWhite","placeHolderText","counterText","searchText","optionsText","muted","buttons1","buttons2","buttons3","buttonText","buttonsClicked","checkboxBorder","optionBoxBackground","searchFilterBackground","inputBackground","inputBorder","inputBorderFocus","inputBorderEditOn","counterAll","counterInProgress","counterCompleted","counterPercentage","taskDetailBackground","taskDetailContentBackground","taskDetailBorderColor","space","breakpoints","styles","Layout","color","backgroundColor","fontFamily","lineHeight","Container","maxWidth","padding","Footer","brandName","year","sx","flexDirection","justifyContent","alignItems","width","fontSize","textAlign","margin","borderRadius","border","borderColor","fontWeight","showAllTasksTxt","thoughtRememberBtnTxt","thoughtForgetBtnTxt","updateText","yesText","noText","todoCreatorAddTaskBtnTxt","todoListState","atom","key","default","todoListFilterState","filteredTodoListState","selector","get","filter","list","item","completed","todoListStatsState","todoList","totalNum","length","totalCompletedNum","totalUncompletedNum","percentCompleted","ProgressCounter","counter","wordBreak","display","marginBottom","px","py","textDecoration","MediumText","marginTop","alignSelf","ButtonWithlink","to","onClick","cursor","textTransform","API_TOKEN","API","getAllTasks","successCallback","fetch","then","response","json","data","error","catch","console","log","updateTask","id","modified","headers","method","JSON","stringify","r","err","TitleStats","useRecoilState","setTodos","useEffect","a","getTodos","useRecoilValue","formattedPercentCompleted","Math","round","TitleText","text1","text2","text3","flexWrap","switchBtnTxt","setUpdateState","delay","setTimeout","timeStampFormatted","timestamp","Date","now","Intl","DateTimeFormat","month","day","hour","minute","second","format","ButtonPrimary","type","displayIt","marginRight","TextArea","value","cols","placeholder","labelText","onChange","disabled","textareaBorderColor","textareaBorderFocusColor","backgroundImage","outline","ThoughtBoard","imageUrl","boardTxtFromLocal","localStorage","getItem","useState","boardText","setBoardText","rememberButtonTxt","setRememberButtonTxt","forgetButtonTxt","setForgetButtonTxt","e","target","minHeight","localKey","localValue","buttonText1","buttonText2","inputValue","undefined","setItem","clear","TitleScreen","theme","BigText","YesNoPopup","onClickYes","onClickNo","messageText","TaskDetailsWrapper","contentArea","DisplayDetailsText","headText","contentText","TaskDetailBtnWrapper","TaskDetails","clickClose","getTask","taskData","completionText","title","created_at","updated_at","ButtonsWrapper","displayStyle","replaceItemAtIndex","arr","index","newValue","slice","TodoItem","initialTitleDisplay","todoItemPrevious","displayOn","displayOff","setTodoList","updateButtonText","setUpdateButtonText","setInputValue","initTaskData","setInitTaskData","textareaDisplay","setTextareaDisplay","updatedData","setUpdatedData","findIndex","listItem","setDisabled","taskBtnEdit","setTaskBtnEdit","taskBtnStatus","setTaskBtnStatus","taskBtnDelete","setTaskBtnDelete","taskBtnDetails","setTaskBtnDetails","yesNoEditPopup","setYesNoEditPopup","yesNoDeletePopup","setYesNoDeletePopup","yesNoStatusPopup","setYesNoStatusPopup","taskDetailView","setTaskDetailView","taskStatusView","setTaskStatusView","setTextareaBorderColor","setTextareaBorderFocusColor","todoDataInit","user_id","completedData","toggleItemCompletion","newList","todoDataModCheck","deleteItem","removeItemAtIndex","displayControl","setBtnEdit","setBtnDelete","setBtnStatus","setBtnDetails","setPopupDel","setPopupEdit","setPopupStatus","setDetailView","disableEditbool","todoDataMod","TodoItemCreator","createBtnTxt","setCreateBtnTxt","useSetRecoilState","todoData","oldTodoList","OptionBox","options","map","el","TodoListFilters","setFilter","TodoListStats","SearchField","TodoList","todos","toSearch","setToSearch","setSearchResults","taskList","taskText","setTaskText","filteredData","results","toString","toLowerCase","includes","filterData","todoItem","App","exact","from","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.395d2f37.chunk.js","sourcesContent":["export default{\r\n  fonts: {\r\n    body: \"'Reggae One', cursive\",\r\n    heading: \"'Reggae One', cursive\",\r\n    blackboard: \"'Indie Flower', cursive\"\r\n  },\r\n  fontSizes: [12, 14, 16, 18, 20, 24, 32, 48],\r\n    fontWeights: {\r\n    body: 400,\r\n    heading: 600,\r\n    blackboardThick: 800\r\n  },\r\n  lineHeights: {\r\n    body: 1.5,\r\n    heading: 1.125,\r\n  },\r\n  colors: {\r\n    // background color\r\n    background: 'darkolivegreen',\r\n    // box container colors\r\n    boxBorder: '#000000',\r\n    boxBackground: 'darkseagreen', \r\n     //app title text colors\r\n     titleText1: 'blue',  \r\n     titleText2: 'white', \r\n     titleText3: 'red',   \r\n    // text colors\r\n    text: '#392a25', \r\n    textWhite: '#ffffff',       \r\n    placeHolderText: '#8a8a5c', \r\n    counterText: '#8a8a5c',\r\n    searchText: '#8a8a5c', \r\n    optionsText: '#8a8a5c',\r\n    muted: '#aaaaaa',\r\n    // button colors\r\n    buttons1: '#62c03b',\r\n    buttons2: '#34aadc',\r\n    buttons3: '#ff70b3',\r\n    buttonText: '#ffffff',\r\n    buttonsClicked: '#ff70b3', \r\n    //checkbox colors\r\n    checkboxBorder: '#174A41',\r\n    // option box colors\r\n    optionBoxBackground: '#000000',     \r\n    //search filter colors\r\n    searchFilterBackground: '#000000',    \r\n    //input fields colors\r\n    inputBackground: '#ffffff',\r\n    inputBorder: '#000000',\r\n    inputBorderFocus: '#34aadc',  \r\n    inputBorderEditOn: 'green',        \r\n    //statistics fields colors\r\n    counterAll: '#000000',\r\n    counterInProgress: '#000000',\r\n    counterCompleted: '#000000',\r\n    counterPercentage: '#000000', \r\n   //task detail show colors\r\n   taskDetailBackground: '#F0E68C',\r\n   taskDetailContentBackground: 'gold',\r\n   taskDetailBorderColor: '#000000'   \r\n  },\r\n  space: [0, 4, 8, 16, 32, 48],\r\n  breakpoints: ['40em', '64em', '80em'],\r\n  styles: {\r\n    Layout: {\r\n      color: 'text',\r\n      backgroundColor: 'background',\r\n      fontFamily: 'body',\r\n      lineHeight: 'body',\r\n    },\r\n    Container: {\r\n      maxWidth: 1160,\r\n      padding: 3,\r\n    }    \r\n  },\r\n};\r\n\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */  \r\nimport { jsx } from 'theme-ui';\r\nimport { Flex } from \"theme-ui\";\r\n\r\n\r\nconst Footer = ({brandName, year}) => {\r\n  return ( \r\n      <Flex sx={{\r\n        flexDirection: 'row',\r\n        justifyContent: 'center',\r\n        alignItems: 'center', \r\n        width: '100vw',  \r\n        fontSize: 4,\r\n        textAlign: 'center',\r\n        margin: 3,\r\n        padding: '9px',\r\n        borderRadius: '4px',\r\n        border: `2px solid`,\r\n        borderColor: `boxBorder`, \r\n        backgroundColor: 'boxBackground'\r\n        }}>\r\n          <div sx={{\r\n        fontFamily: 'heading',\r\n        fontWeight: 'body',      \r\n        color: `text`,\r\n        }}>\r\n          © {year} {brandName}\r\n          </div>\r\n      </Flex>         \r\n  );\r\n};\r\n\r\n\r\nexport default Footer;","//all text content in English lands here, in exported variables\r\n\r\n//recoil.js text\r\nexport const showAllTasksTxt = \"Show All Tasks\";\r\nexport const showInProgressOnlyTxt = \"In progress only\";\r\nexport const showCompletedOnlyTxt = \"Completed only\";\r\n\r\n //thought board main menu text\r\n export const thoughtBoardTitleTxt = \"Set your goal and completion reward, or simply write down loose thoughts:\";\r\n export const thoughtRememberBtnTxt = \"Remember\";\r\n export const thoughtForgetBtnTxt = \"Forget\";\r\n export const thoughtForgottenTxt = \"Forgotten\";\r\n export const thoughtRememberedTxt = \"Remembered\";\r\n export const thoughtRememberEmptyTxt = \"Nothing to remember\";\r\n export const thoughtForgetEmpytTxt = \"Nothing to forget\";\r\n\r\n//title screen header and footer text\r\nexport const titlePart1Txt = \"The\";\r\nexport const titlePart2Txt = \"Eazzy\";\r\nexport const titlePart3Txt = \"Organizer\";\r\nexport const footerYearTxt = \"2021\";\r\nexport const footerBrandnameTxt = \"HFM Wojbaza\";\r\n\r\n//title screen statistics text\r\nexport const titleStatsTitleTxt = \"Your progress:\";\r\nexport const titleStatsTotalTxt = \"Total tasks:\";\r\nexport const titleStatsCompletedTxt = \"Completed:\";\r\nexport const titleStatsInProgressTxt = \"In progress:\";\r\nexport const titleStatsPercentCompletedTxt = \"Percent completed:\";\r\nexport const titleStatsToActionBtnTxt = \"To action\"; \r\n\r\n //text for item content and options in TodoItem.js\r\n export const updateText = \"Update task\";\r\n export const updateEmptyText = \"Cannot be empty\";    \r\n export const deleteText = \"Delete task\";   \r\n export const yesText = \"Confirm\";\r\n export const noText = \"Go back\";\r\n export const statusYesNoMessage = \"Change task status?\";    \r\n export const editYesNoMessage = \"Editing enabled, update task?\";\r\n export const deleteYesNoMessage = \"Delete this task?\";\r\n export const todoItemStatusInProgressText = \"Task is currently in progress\";\r\n export const todoItemStatusCompletedText =\"Task is completed\";\r\n export const todoItemChangeStatusBtnTxt = \"Completion\";\r\n export const todoItemShowDetailsBtnTxt = \"Show details\";\r\n\r\n //item creator text for adding new task or going back to menu\r\n export const todoCreatorAddTaskBtnTxt = \"Add new task\";\r\n export const todoCreatorTaskAddedTxt = \"New task added\";\r\n export const todoCreatorTaskEmptyTxt = \"Nothing to add\";\r\n export const todoCreatorTitleTxt = \"Create new task:\";\r\n export const todoCreatorPlaceholderTxt = \"What needs to be done?\";\r\n export const todoCreatorBackToMainTxt = \"Back to main menu\";  \r\n export const todoCreatorNotUpdatedYetTxt = \"Not updated yet\";\r\n\r\n //search filter text in TodoList.js\r\n export const todoListTitleTxt = \"Find Your task:\";\r\n export const todoListSearchPlaceholderTxt = \"Search\";\r\n\r\n//text for task filter\r\nexport const todoFilterShowAllTxt = \"Show all tasks\";\r\nexport const todoFilterCompletedOnlyTxt = \"Completed only\";\r\nexport const todoFilterInProgressOnlyTxt = \"In progress only\";\r\n\r\n //text for action screen stats TodoListStats.js\r\n export const todoActionStatsTitleTxt = \"Your progress:\";\r\n export const todoActionStatsTotalTxt = \"Total tasks:\";\r\n export const todoActionStatsCompletedTxt = \"Completed:\";\r\n export const todoActionStatsInProgressTxt = \"In progress:\";\r\n\r\n //text from TaskDetails.js\r\n export const taskDetailsTaskNumberTxt = \"Task number:\";\r\n export const taskDetailsTaskContentTxt = \"Your task:\";\r\n export const taskDetailsStatusTxt = \"Status:\";\r\n export const taskDetailsTimeStartedTxt = \"Time started:\";\r\n export const taskDetailsTimeUpdatedTxt = \"Last time updated:\";\r\n export const taskDetailsInProgressTxt = \"Task in progress\";\r\n export const taskDetailsCloseBtnTxt = \"Close\";\r\n export const taskDetailsCompletedTxt = \"Task completed\";\r\n ","import { atom, selector } from 'recoil';\r\nimport { showAllTasksTxt,showInProgressOnlyTxt, showCompletedOnlyTxt} from '../content/contentEng';\r\n\r\n\r\nexport const todoListState = atom({\r\n    key: 'todoListState',\r\n    default: [],\r\n  }); \r\n\r\n\r\n  export const todoListFilterState = atom({\r\n    key: 'todoListFilterState',\r\n    default: showAllTasksTxt,\r\n  });\r\n  \r\n\r\n  export const filteredTodoListState = selector({\r\n    key: 'filteredTodoListState',\r\n    get: ({get}) => {\r\n      const filter = get(todoListFilterState);\r\n      const list = get(todoListState);\r\n  \r\n      switch (filter) {\r\n        case showAllTasksTxt:\r\n          return list.filter((item) => item);\r\n        case showInProgressOnlyTxt:\r\n          return list.filter((item) => !item.completed);\r\n          case showCompletedOnlyTxt:\r\n            return list.filter((item) => item.completed);\r\n        default:\r\n          return list;\r\n      }\r\n    },\r\n  });\r\n\r\n\r\n  export const todoListStatsState = selector({\r\n    key: 'todoListStatsState',\r\n    get: ({get}) => {\r\n      const todoList = get(todoListState);\r\n      const totalNum = todoList.length;\r\n      const totalCompletedNum = todoList.filter((item) => item.completed).length;\r\n      const totalUncompletedNum = totalNum - totalCompletedNum;\r\n      const percentCompleted = totalNum === 0 ? 0 : totalCompletedNum / totalNum * 100;\r\n  \r\n      return {\r\n        totalNum,\r\n        totalCompletedNum,\r\n        totalUncompletedNum,\r\n        percentCompleted,\r\n      };\r\n    },\r\n  });","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst ProgressCounter = ({text, counter, backgroundColor, color, borderColor}) => (\r\n    <button        \r\n    sx={{\r\n      wordBreak: 'break-word', \r\n      backgroundColor: `${backgroundColor}`,\r\n      borderRadius: '4px',\r\n      border: `2px solid`,\r\n      borderColor: `${borderColor}`,\r\n      color: `${color}`,\r\n      display: 'inline-block',\r\n      fontFamily: 'heading',\r\n      fontSize: [0, 1],\r\n      fontWeight: 'bold',\r\n      marginBottom: 1,\r\n      px: 3, // shorthand for defining padding-left and padding-right\r\n      py: 2, // shorthand for defining padding-top and padding-bottom\r\n      textDecoration: 'none',\r\n    //   textTransform: 'uppercase',         \r\n    }}\r\n  > {text} {counter}\r\n  </button>   \r\n);\r\n\r\n\r\nexport default ProgressCounter;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst MediumText = ({text, color, marginBottom, marginTop, display, alignSelf}) => (\r\n    <div \r\n    sx={{\r\n      fontFamily: 'heading',\r\n      fontWeight: 'heading',\r\n      fontSize: [1, 2],\r\n      color: `${color}`,\r\n      marginBottom: `${marginBottom}`,\r\n      marginTop: `${marginTop}`,\r\n      display: `${display}`,\r\n      alignSelf: `${alignSelf}`  \r\n    }}\r\n  >\r\n    {text}\r\n  </div> \r\n);\r\n\r\n\r\nexport default MediumText;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst ButtonWithlink = ({to, text, backgroundColor, onClick}) => (\r\n    <Link to={to} onClick={onClick}        \r\n            sx={{  \r\n            alignSelf: 'center',              \r\n            wordBreak: 'break-word', \r\n            backgroundColor: `${backgroundColor}`,\r\n            borderRadius: '4px',\r\n            border: 'none',\r\n            color: 'buttonText',\r\n            display: 'flex !important',\r\n            fontFamily: 'heading',\r\n            fontSize: [0, 1],\r\n            fontWeight: 'bold',\r\n            marginTop: 2,\r\n            marginBottom: 1,            \r\n            cursor: 'pointer',\r\n            px: 3, // shorthand for defining padding-left and padding-right\r\n            py: 2, // shorthand for defining padding-top and padding-bottom\r\n            textDecoration: 'none',\r\n            textTransform: 'uppercase',        \r\n            // '&:hover, &:focus': { backgroundColor: 'buttonsClicked' },\r\n         }}\r\n        >\r\n            {text}    \r\n    </Link>    \r\n);\r\n\r\n\r\nexport default ButtonWithlink;\r\n\r\n\r\n    ","export const userId = 704;\r\n\r\nexport const API_TOKEN = \"704ca2c83c1da8b69a000377346dfbb48261db11383f1643e9c81da767cfeb7b\";\r\nexport const API = `https://gorest.co.in/public-api/todos`;\r\n// export const API = \"https://gorest.co.in/public-api/users/704/todos\";\r\n\r\n\r\n","// json-server --watch src/API/todos.json --host 127.0.0.1\r\nimport { API, API_TOKEN } from \"./variables\";\r\n\r\n\r\n//get all the tasks from database \r\nexport const getAllTasks = (successCallback) => {\r\n    fetch(`${API}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            successCallback(data.data);\r\n            if (data.error === false && typeof successCallback === \"function\") {\r\n                successCallback(data);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);           \r\n        });\r\n}\r\n\r\n//get single task \r\nexport const getSingleTask = (id, successCallback) => {\r\n    fetch(`${API}/${id}`)    \r\n        .then(response => response.json())\r\n        .then(data => {\r\n            successCallback(data.data);          \r\n        })\r\n        .catch(error => {\r\n            console.log(error);            \r\n        });\r\n}\r\n\r\n//add a task \r\nexport const addTask = (taskData, successCallback) => {\r\n    fetch(`${API}`, {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${API_TOKEN}`,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"POST\",\r\n        body: JSON.stringify(taskData)\r\n    })\r\n        .then(r => r.json())\r\n        .then(data => {            \r\n            if (data.error === false && typeof successCallback === \"function\") {\r\n                successCallback(data);                        \r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n//edit task \r\nexport const updateTask = (id, modified, successCallback) => {\r\n    fetch(`${API}/${id}`, {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${API_TOKEN}`,\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        method: \"PUT\",\r\n        body: JSON.stringify(modified)\r\n    })\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            if (data.error === false && typeof successCallback === \"function\") {\r\n                successCallback(data.data);\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\n//delete task \r\nexport const deleteTask = (id, successCallback) => {\r\n    fetch(`${API}/${id}`, {\r\n        headers: {\r\n            \"Authorization\": `Bearer ${API_TOKEN}`,\r\n        },\r\n        method: \"DELETE\"\r\n    })\r\n        .then(r => r.json())\r\n        .then(data => {\r\n            if (data.error === false && typeof successCallback === \"function\") {\r\n                successCallback();\r\n            }\r\n        })\r\n        .catch(err => console.log(err));\r\n};","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { useEffect } from 'react';\r\nimport { jsx, Flex } from 'theme-ui';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { todoListState, todoListStatsState } from \"../../functions/recoil\";\r\nimport ProgressCounter from '../atoms/ProgressCounter';\r\nimport MediumText from '../atoms/MediumText';\r\nimport ButtonWithlink from '../atoms/ButtonWithLink';\r\nimport { getAllTasks } from '../../API/fetch';\r\nimport { titleStatsTitleTxt,\r\n  titleStatsTotalTxt,  \r\n  titleStatsCompletedTxt,\r\n  titleStatsInProgressTxt,\r\n  titleStatsPercentCompletedTxt, \r\n  titleStatsToActionBtnTxt\r\n} from '../../content/contentEng';\r\n\r\n\r\nfunction TitleStats() {\r\n    const [todos, setTodos] = useRecoilState(todoListState);     \r\n\r\n     // decoy for empty state todos\r\n    const decoy = todos;\r\n\r\n\r\n    useEffect(() => {\r\n       const getTodos = async () => {\r\n       getAllTasks(setTodos)\r\n       }\r\n      getTodos()  \r\n    }, [])  \r\n    \r\n    const {\r\n      totalNum,\r\n      totalCompletedNum,\r\n      totalUncompletedNum,\r\n      percentCompleted,\r\n    } = useRecoilValue(todoListStatsState);\r\n  \r\n    //percentage completed feature - round it to nearest whole number\r\n    const formattedPercentCompleted = Math.round(percentCompleted);\r\n \r\n     \r\n    return (\r\n      <Flex\r\n      sx={{\r\n        flexDirection: 'column',\r\n        background: 'box',     \r\n        backgroundColor: 'boxBackground',\r\n        color: 'text',\r\n        border: '2px solid',\r\n        borderColor: 'boxBorder',\r\n        borderRadius: 4,\r\n        fontSize: 4,\r\n        margin: 3,\r\n        padding: 3,\r\n      }}\r\n    ><MediumText text={titleStatsTitleTxt} marginBottom={2} />\r\n        <ProgressCounter text={`${titleStatsTotalTxt} ${totalNum}`}\r\n         backgroundColor={'counterAll'} color={`counterText`} />\r\n        <ProgressCounter text={`${titleStatsCompletedTxt} ${totalCompletedNum}`}\r\n         backgroundColor={'counterInProgress'} color={`counterText`}/>\r\n        <ProgressCounter text={`${titleStatsInProgressTxt} ${totalUncompletedNum}`}\r\n         backgroundColor={'counterCompleted'} color={`counterText`}/>\r\n        <ProgressCounter text={`${titleStatsPercentCompletedTxt} ${formattedPercentCompleted}`}\r\n         backgroundColor={'counterPercentage'} color={`counterText`}/>   \r\n        <ButtonWithlink to={'action'} text={titleStatsToActionBtnTxt} backgroundColor={`buttons1`} />\r\n      </Flex>\r\n    );\r\n  }\r\n\r\n\r\n  export default TitleStats;\r\n\r\n","export default __webpack_public_path__ + \"static/media/b4769e3a52766f30e86b375391c84441.3d007a0b.jpg\";","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst TitleText = ({text1, text2, text3, marginBottom, backgroundColor}) => (\r\n    <h2\r\n      sx={{\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        backgroundColor: `${backgroundColor}`,\r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',        \r\n        fontSize: [3, 4, 5],\r\n        margin: 0,\r\n        marginBottom: `${marginBottom}`\r\n      }}    >\r\n        <span sx={{color: `titleText1`}}>{text1}</span>\r\n        <span sx={{color: `titleText2`}}>{text2}</span>\r\n        <span sx={{color: `titleText3`}}>{text3}</span>      \r\n    </h2>\r\n);\r\n\r\n\r\nexport default TitleText;\r\n\r\n\r\n    ","\r\n//switch button text, add it to onClick handler for buttons, \r\nexport const switchBtnTxt = (setUpdateState, text1, text2, delay = 1800) => {\r\n    setUpdateState(text2);\r\n    setTimeout(() => {\r\n      setUpdateState(text1);\r\n    }, delay); \r\n}\r\n\r\n\r\n//toggle displays when buttons clicked\r\nexport const toggleDisplay = (setDisplayOn, setDisplayOff, displayTypeOn) => {\r\n  setDisplayOn(displayTypeOn);\r\n  setDisplayOff('none');\r\n}  \r\n\r\n\r\n//formatted current date and time, for create and edit tasks\r\nexport const timeStampFormatted = () => {\r\n  const timestamp = Date.now(); // This would be the timestamp you want to format\r\n  const formatted = new Intl.DateTimeFormat('en-US', {year: 'numeric', month: '2-digit',day: '2-digit',\r\n  hour: '2-digit', minute: '2-digit', second: '2-digit'}).format(timestamp);\r\n  return formatted\r\n} \r\n\r\n\r\n\r\n\r\n\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst ButtonPrimary = ({text, backgroundColor, onClick, type, id, displayIt, alignSelf = 'center'}) => (\r\n    <div >\r\n        <button type={type} onClick={onClick} id={id}\r\n            sx={{\r\n            wordBreak: 'break-word', \r\n            alignSelf: `${alignSelf}`,\r\n            backgroundColor: `${backgroundColor}`,\r\n            borderRadius: '4px',\r\n            border: 'none',\r\n            color: 'buttonText',\r\n            display: 'flex !important',\r\n            fontFamily: 'heading',\r\n            fontSize: [0, 1],\r\n            fontWeight: 'bold',\r\n            marginBottom: 1,\r\n            marginTop: 2,\r\n            marginRight: 2,\r\n            cursor: 'pointer',\r\n            px: 3, // shorthand for defining padding-left and padding-right\r\n            py: 2, // shorthand for defining padding-top and padding-bottom\r\n            textDecoration: 'none',\r\n            textTransform: 'uppercase',\r\n            display: `${displayIt}`,        \r\n            // '&:hover, &:focus': { backgroundColor: 'buttonsClicked' },\r\n         }}\r\n        >\r\n            {text}\r\n        </button>\r\n    </div> \r\n   \r\n);\r\n\r\n\r\nexport default ButtonPrimary;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx, Label, Textarea } from 'theme-ui';\r\nimport blackboard from \"../../assets/b4769e3a52766f30e86b375391c84441.jpg\";\r\n\r\n\r\nconst TextArea = ({value, cols, placeholder, \r\n     labelText, onChange, disabled, textareaBorderColor = 'inputBorder', textareaBorderFocusColor}) => (\r\n    <Flex>\r\n        <Label sx={{flexDirection: `column`, \r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',              \r\n        fontSize: [`16, 18, 20`],\r\n        margin: 0,\r\n}}>{labelText}\r\n            <Textarea value={value} onChange={onChange}\r\n            cols={cols} placeholder={placeholder} disabled={disabled}\r\n            sx={{\r\n                backgroundImage: `url(${blackboard})`,\r\n                // backgroundColor: `inputBackground`,\r\n                border: '2px solid',\r\n                borderColor: `${textareaBorderColor}`,\r\n                borderRadius: '4px',               \r\n                color: `textWhite`,\r\n                display: 'inline-block',\r\n                fontFamily: 'blackboard',\r\n                fontSize: [2, 3],\r\n                fontWeight: '400 !important',                \r\n                marginBottom: 2,\r\n                maxWidth: '100%',\r\n                px: 3, // shorthand for defining padding-left and padding-right\r\n                py: 2, // shorthand for defining padding-top and padding-bottom\r\n                textDecoration: 'none',\r\n                // textTransform: 'uppercase',\r\n                '&:hover, &:focus': {\r\n                backgroundImage: `url(${blackboard})`,\r\n                border: '2px solid',\r\n                borderColor: `${textareaBorderFocusColor}`,            \r\n                outline: 'none !important'},\r\n                '&::placeholder' : {color: 'placeHolderText'}\r\n            }}\r\n            >    \r\n            </Textarea> \r\n        </Label>\r\n    </Flex>  \r\n);\r\n\r\n\r\nexport default TextArea;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */  \r\nimport { useState } from 'react';\r\nimport { jsx } from 'theme-ui';\r\nimport { Flex } from \"theme-ui\";\r\nimport { switchBtnTxt } from '../../functions/functionStorage';\r\nimport ButtonPrimary from '../atoms/ButtonPrimary';\r\nimport MediumText from '../atoms/MediumText';\r\nimport { thoughtBoardTitleTxt,\r\n         thoughtRememberBtnTxt,\r\n         thoughtForgetBtnTxt,\r\n         thoughtForgottenTxt,\r\n         thoughtRememberedTxt,\r\n         thoughtRememberEmptyTxt,\r\n         thoughtForgetEmpytTxt\r\n} from '../../content/contentEng';\r\nimport TextArea from '../atoms/TextArea';\r\n\r\n\r\nconst ThoughtBoard = ({imageUrl}) => {\r\n    const boardTxtFromLocal = localStorage.getItem('notes');   \r\n    const [boardText, setBoardText] = useState(boardTxtFromLocal);  \r\n    const [rememberButtonTxt, setRememberButtonTxt] = useState(thoughtRememberBtnTxt);\r\n    const [forgetButtonTxt, setForgetButtonTxt] = useState(thoughtForgetBtnTxt);  \r\n\r\n\r\n    const handleClickSaveToLocal = (localKey, localValue, buttonText1, buttonText2, inputValue) => {\r\n      //no empty content - validator        \r\n      if ( inputValue === \"\" || inputValue === null || inputValue === undefined) {\r\n        switchBtnTxt(setRememberButtonTxt, thoughtRememberBtnTxt, thoughtRememberEmptyTxt);\r\n      }    \r\n      else {    \r\n        localStorage.setItem(localKey, localValue);       \r\n        switchBtnTxt(setRememberButtonTxt, buttonText2, buttonText1);  \r\n      }      \r\n    }\r\n\r\n    const handleClickClearLocal = (buttonText1, buttonText2, inputValue) => {    \r\n      if (inputValue === \"\" || inputValue === null || inputValue === undefined) {\r\n        switchBtnTxt(setForgetButtonTxt, thoughtForgetBtnTxt, thoughtForgetEmpytTxt);      \r\n      }\r\n      else {\r\n        localStorage.clear();            \r\n        switchBtnTxt(setForgetButtonTxt, buttonText2, buttonText1);\r\n        setTimeout(() => {\r\n        setBoardText(\"\");\r\n        })\r\n      }         \r\n    }\r\n\r\n\r\n  return ( \r\n    <Flex\r\n    sx={{       \r\n      maxWidth: '100vw',               \r\n      flexDirection: 'column',\r\n      background: 'box',     \r\n      backgroundColor: 'boxBackground',\r\n      color: 'text',\r\n      border: '2px solid',\r\n      borderColor: 'boxBorder',\r\n      borderRadius: 4,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n      marginBottom: 0\r\n    }}\r\n  >\r\n      <MediumText text={thoughtBoardTitleTxt} marginBottom={2} />\r\n        <TextArea value={boardText} textareaBorderFocusColor={'inputBorderFocus'} onChange={e => setBoardText(e.target.value)}\r\n           sx={{                   \r\n              maxWidth: '100%',  \r\n              minHeight: '14.5vh',\r\n              backgroundImage: `url(${imageUrl})`,  \r\n              fontFamily: 'blackboard',\r\n              fontWeight: 'blackboardThick',\r\n              color: 'textWhite',\r\n              '&::placeholder' : {color: 'placeHolderText'}                   \r\n           }}/>       \r\n           <Flex sx={{flexWrap: 'wrap',\r\n                      flexDirection: 'row',\r\n                      justifyContent: 'space-between',\r\n                      '@media screen and (max-width: 700px)': {\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center'}}}>\r\n               <ButtonPrimary text={rememberButtonTxt} backgroundColor={`buttons2`} \r\n               onClick={() => handleClickSaveToLocal('notes', boardText, thoughtRememberedTxt, thoughtRememberBtnTxt, \r\n               boardText)} />\r\n               <ButtonPrimary text={forgetButtonTxt} backgroundColor={`buttons3`}\r\n                onClick={() => handleClickClearLocal(thoughtForgottenTxt, thoughtForgetBtnTxt, boardText)}/>\r\n           </Flex>                 \r\n      </Flex>         \r\n  );\r\n};\r\n\r\n\r\nexport default ThoughtBoard;\r\n\r\n\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */  \r\nimport {jsx, ThemeProvider, Container, Flex } from 'theme-ui';\r\nimport theme from '../../styles/themes/theme';\r\nimport Footer from '../molecules/Footer';\r\nimport TitleStats from './TitleStats';\r\nimport blackboard from \"../../assets/b4769e3a52766f30e86b375391c84441.jpg\";\r\nimport TitleText from '../atoms/TitleText';\r\nimport ThoughtBoard from './ThoughtBoard';\r\nimport { titlePart1Txt,\r\n         titlePart2Txt,\r\n         titlePart3Txt,\r\n         footerYearTxt,\r\n         footerBrandnameTxt,  \r\n} from '../../content/contentEng';\r\n\r\n\r\n  function TitleScreen() {  \r\n    \r\n\r\n      return (\r\n        <ThemeProvider theme={theme} >                \r\n          <Container>             \r\n          <Flex sx={{                        \r\n            background: 'linear-gradient(to top, #0ba360 0%, #3cba92 100%)',\r\n            color: 'text',\r\n            border: '2px solid',  \r\n            borderColor: 'boxBorder', \r\n            borderRadius: 4,\r\n            fontSize: 4,\r\n            margin: 3,       \r\n            padding: 3,\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'\r\n          }}><TitleText text1={titlePart1Txt} text2={titlePart2Txt} text3={titlePart3Txt} marginBottom={2} />       \r\n            </Flex>\r\n            <ThoughtBoard imageUrl={blackboard} />\r\n            <TitleStats />            \r\n            <Flex sx = {{   \r\n             justifyContent: 'center',\r\n             alignItems: 'flex-end'}}>            \r\n                <Footer year={footerYearTxt} brandName={footerBrandnameTxt} />\r\n            </Flex>         \r\n          </Container>     \r\n        </ThemeProvider>      \r\n      );\r\n    }\r\n  \r\n  \r\n    export default TitleScreen;","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst BigText = ({text, color, marginBottom, backgroundColor}) => (\r\n    <h2\r\n      sx={{\r\n        backgroundColor: `${backgroundColor}`,\r\n        fontFamily: 'heading',\r\n        fontWeight: 'heading',\r\n        color: `${color}`,\r\n        fontSize: [3, 4, 5],\r\n        margin: 0,\r\n        marginBottom: `${marginBottom}`\r\n      }}\r\n    >\r\n      {text}\r\n    </h2>\r\n);\r\n\r\n\r\nexport default BigText;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui';\r\nimport ButtonPrimary from '../atoms/ButtonPrimary';\r\nimport MediumText from '../atoms/MediumText';\r\n\r\n\r\nconst YesNoPopup = ({onClickYes, onClickNo, messageText, yesText, noText}) => (\r\n <Flex sx={{alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexDirection: 'row',\r\n            width: '100%',\r\n            '@media screen and (max-width: 700px)': {\r\n               flexDirection: 'column',\r\n               alignItems: 'center',\r\n               justifyContent: 'center'}}}>\r\n    <ButtonPrimary text={yesText} onClick={onClickYes} backgroundColor={'buttons1'}/>\r\n    <MediumText marginBottom={2} marginTop={2} text={messageText} display={'flex'} alignSelf={'center'} />\r\n    <ButtonPrimary text={noText} onClick={onClickNo} backgroundColor={'buttons3'}/>\r\n </Flex>\r\n);\r\n\r\n\r\nexport default YesNoPopup;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst TaskDetailsWrapper = ({contentArea, displayIt}) => (  \r\n    <div\r\n    sx={{\r\n      display: `${displayIt}`,\r\n      alignItems: 'center', \r\n      justifyContent: 'center',\r\n      alignSelf: 'center',        \r\n      background: 'linear-gradient(to right, #43e97b 0%, #38f9d7 100%)',\r\n      color: 'text',\r\n      border: '2px solid', \r\n      borderColor: 'boxBorder',  \r\n      borderRadius: 4,\r\n      fontFamily: 'body',\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,          \r\n    }}\r\n  >  \r\n    {contentArea}\r\n</div> \r\n);\r\n\r\n\r\nexport default TaskDetailsWrapper;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui';\r\n\r\n\r\nconst DisplayDetailsText = ({headText, contentText, marginTop, \r\n    marginBottom, backgroundColor}) => (\r\n    <div sx={{ display: 'flex',             \r\n               wordBreak: 'break-word', \r\n               alignSelf: `center`,\r\n               flexDirection: 'column',\r\n               marginTop: `${marginTop}`, \r\n               marginBottom: `${marginBottom}`, \r\n               textAlign: 'center',\r\n               backgroundColor: `${backgroundColor}`,\r\n               width: '100%',\r\n               padding: 2,\r\n               border: '2px solid',\r\n               borderColor: 'taskDetailBorderColor',\r\n               borderRadius: '4px',\r\n               fontSize: [1, 4]                           \r\n                }}>\r\n        <span sx={{fontWeight: 'heading'}}>{headText}</span>{contentText}\r\n        </div>  \r\n);\r\n\r\n\r\nexport default DisplayDetailsText;\r\n\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst TaskDetailBtnWrapper = ({contentArea}) => (    \r\n<div sx={{display: 'flex',         \r\n          justifyContent: 'center',\r\n          alignSelf: 'center',\r\n          width: '100%'            \r\n }}>\r\n    {contentArea}\r\n</div> \r\n);\r\n\r\n\r\nexport default TaskDetailBtnWrapper;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx } from 'theme-ui';\r\nimport ButtonPrimary from '../atoms/ButtonPrimary';\r\nimport TaskDetailsWrapper from '../containers/TaskDetailsWrapper';\r\nimport { taskDetailsTaskNumberTxt,\r\n  taskDetailsTaskContentTxt,\r\n  taskDetailsStatusTxt,\r\n  taskDetailsTimeStartedTxt,\r\n  taskDetailsTimeUpdatedTxt,\r\n  taskDetailsInProgressTxt,\r\n  taskDetailsCloseBtnTxt,\r\n  taskDetailsCompletedTxt\r\n} from '../../content/contentEng';\r\nimport DisplayDetailsText from '../atoms/DisplayDetailsText';\r\nimport TaskDetailBtnWrapper from '../containers/TaskDetailBtnWrapper';\r\n\r\n\r\nconst TaskDetails =({clickClose, displayIt = 'flex', taskData}) => {  \r\n  let getTask = taskData;  \r\n\r\n\r\n  //convert task completion status from true/false to success/in progress text\r\n  let completionText = \"\";  \r\n  if (getTask.completed === true) {\r\n    completionText = taskDetailsCompletedTxt; \r\n    }\r\n  else {\r\n    completionText = taskDetailsInProgressTxt;\r\n    }      \r\n               \r\n    \r\n    return (\r\n      <TaskDetailsWrapper displayIt={displayIt} contentArea={\r\n        <Flex sx={{flexDirection: 'column'}}>    \r\n          <DisplayDetailsText headText={taskDetailsTaskNumberTxt} contentText={getTask.id} marginTop={1} marginBottom={1}\r\n          backgroundColor={'taskDetailContentBackground'}/>       \r\n          <DisplayDetailsText headText={taskDetailsTaskContentTxt} contentText={getTask.title} marginTop={2} marginBottom={2} \r\n          backgroundColor={'taskDetailContentBackground'}/>            \r\n          <DisplayDetailsText headText={taskDetailsStatusTxt} contentText={completionText} marginTop={2} marginBottom={2}\r\n          backgroundColor={'taskDetailContentBackground'}/>\r\n          <DisplayDetailsText headText={taskDetailsTimeStartedTxt} contentText={getTask.created_at} marginTop={2} marginBottom={2}\r\n          backgroundColor={'taskDetailContentBackground'} />            \r\n          <DisplayDetailsText headText={taskDetailsTimeUpdatedTxt} contentText={getTask.updated_at} marginTop={2} marginBottom={2}\r\n          backgroundColor={'taskDetailContentBackground'} />  \r\n            <TaskDetailBtnWrapper contentArea={  \r\n            <ButtonPrimary text={taskDetailsCloseBtnTxt} backgroundColor={'buttons3'}\r\n                           onClick={clickClose} marginTop={1} marginBottom={1}/>} />          \r\n        </Flex>         \r\n      }/>    \r\n    );\r\n  }\r\n\r\n\r\n  export default TaskDetails;","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx } from 'theme-ui';\r\n\r\n\r\nconst ButtonsWrapper = ({contentArea, displayStyle, alignSelf}) => (    \r\n<div sx={{display: `${displayStyle}`,\r\n          flexWrap: 'wrap',\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          alignSelf: `${alignSelf}`,\r\n          width: '100% !important',\r\n          '@media screen and (max-width: 700px)': {\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center'}          \r\n }}>\r\n    {contentArea}\r\n</div> \r\n);\r\n\r\n\r\nexport default ButtonsWrapper;\r\n\r\n\r\n    ","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx } from 'theme-ui';\r\nimport { useRecoilState } from 'recoil';\r\nimport { useState, useEffect } from 'react';\r\nimport { todoListState } from '../../functions/recoil';\r\nimport ButtonPrimary from '../atoms/ButtonPrimary';\r\nimport { deleteTask, updateTask } from '../../API/fetch';\r\nimport MediumText from '../atoms/MediumText';\r\nimport BigText from '../atoms/BigText';\r\nimport TextArea from '../atoms/TextArea';\r\nimport { switchBtnTxt, timeStampFormatted, } from '../../functions/functionStorage';\r\nimport YesNoPopup from '../molecules/YesNoPopup';\r\nimport TaskDetails from './TaskDetails';\r\nimport ButtonsWrapper from '../containers/ButtonsWrapper';\r\nimport { updateText,\r\n  updateEmptyText,  \r\n  deleteText,\r\n  yesText,\r\n  noText, \r\n  statusYesNoMessage,\r\n  editYesNoMessage,  \r\n  deleteYesNoMessage,\r\n  todoItemStatusInProgressText,\r\n  todoItemStatusCompletedText, \r\n  todoItemChangeStatusBtnTxt,\r\n  todoItemShowDetailsBtnTxt\r\n} from '../../content/contentEng';\r\n\r\n\r\nfunction TodoItem({item}) {\r\n  //init data \r\n  const initialTitleDisplay = item.title;\r\n  const todoItemPrevious = item;\r\n  //display toggle style setting\r\n  const displayOn = 'flex';\r\n  const displayOff = 'none';\r\n  //sets equal delays for common timeouts\r\n  const delayTime = 1800;\r\n\r\n  const [todoList, setTodoList] = useRecoilState(todoListState); \r\n  const [updateButtonText, setUpdateButtonText] = useState(updateText);\r\n  const [inputValue, setInputValue] = useState(''); \r\n  const [initTaskData, setInitTaskData] = useState(item);\r\n  const [textareaDisplay, setTextareaDisplay] = useState(initialTitleDisplay);   \r\n  const [updatedData, setUpdatedData] = useState(todoItemPrevious);    \r\n  const index = todoList.findIndex((listItem) => listItem === item);\r\n  //toggle textarea enabled or disabled\r\n  const [disabled, setDisabled] = useState(true);\r\n  // buttons active or not\r\n  const [taskBtnEdit, setTaskBtnEdit] = useState(displayOn); \r\n  const [taskBtnStatus, setTaskBtnStatus] = useState(displayOn); \r\n  const [taskBtnDelete, setTaskBtnDelete] = useState(displayOn);\r\n  const [taskBtnDetails, setTaskBtnDetails] = useState(displayOn);      \r\n  //yes no popups active or not\r\n  const [yesNoEditPopup, setYesNoEditPopup] = useState(displayOff);  \r\n  const [yesNoDeletePopup, setYesNoDeletePopup] = useState(displayOff);  \r\n  const [yesNoStatusPopup, setYesNoStatusPopup] = useState(displayOff);     \r\n  //views active or not\r\n  const [taskDetailView, setTaskDetailView] = useState(displayOff);\r\n  const [taskStatusView, setTaskStatusView] = useState(displayOn);  \r\n  //set border color for textarea when edited or not\r\n  const [textareaBorderColor, setTextareaBorderColor] = useState('inputBorder');\r\n  const [textareaBorderFocusColor, setTextareaBorderFocusColor] = useState('inputBorder');\r\n  // inputBorderFocus: '#34aadc',  \r\n  // inputBorderFocusEditOn: 'green',   \r\n  //decoy for initially empty input\r\n  const decoy = inputValue;\r\n \r\n    \r\n    //data to retrieve initial input if edit cancelled\r\n    useEffect(() => {\r\n      const todoDataInit = {\r\n        id: item.id,\r\n        user_id: item.user_id,\r\n        title: item.title,\r\n        completed: item.completed,\r\n        created_at: item.created_at,\r\n        updated_at: item.updated_at\r\n      }  \r\n      setInitTaskData(todoDataInit)\r\n    }, [])  \r\n    \r\n    //when edit button clicked \r\n    const handleUpdateBtn = () => {    \r\n      displayControl(displayOff, displayOff, displayOff, displayOff, displayOff, displayOn, displayOff, displayOff, false);\r\n      setTextareaBorderColor('inputBorderEditOn');\r\n      setTextareaBorderFocusColor('inputBorderFocus');\r\n        }     \r\n\r\n    //when edit cancelled     \r\n    const handleUpdateNoBtn = () => {  \r\n      displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);\r\n      setTextareaDisplay(initTaskData.title); \r\n      setTextareaBorderColor('inputBorder');\r\n      setTextareaBorderFocusColor('inputBorder');\r\n    } \r\n\r\n    //edit dynamic content value on change\r\n    const editItemText = ({target: {value}}) => {    \r\n      const todoDataMod = {\r\n        id: item.id,\r\n        user_id: item.user_id,\r\n        title: value,\r\n        completed: item.completed,\r\n        created_at: item.created_at,\r\n        updated_at: timeStampFormatted()\r\n      }   \r\n\r\n      //this makes target value update dynamically on textarea     \r\n      const newList = replaceItemAtIndex(todoList, index, {\r\n        ...item,\r\n        title: value,\r\n        updated_at: timeStampFormatted()\r\n      });     \r\n      setTextareaDisplay(todoDataMod.title);    \r\n      setUpdatedData(todoDataMod);\r\n      setInputValue(value);    \r\n      setTodoList(newList);          \r\n    };   \r\n\r\n    //commit edit changes on click\r\n    const confirmEditChanges = (todoDataMod) => {\r\n      if (updatedData.title === \"\" || updatedData.title === null || updatedData.title === undefined) {\r\n        setTaskBtnEdit(displayOn);\r\n        setYesNoEditPopup(displayOff); \r\n        switchBtnTxt(setUpdateButtonText, updateText, updateEmptyText, delayTime);  \r\n        setTimeout(() => {\r\n          setTaskBtnEdit(displayOff);\r\n          setYesNoEditPopup(displayOn); \r\n        }, delayTime);   \r\n      } \r\n      else {\r\n        updateTask(item.id, todoDataMod);   \r\n        setInitTaskData(item);                  \r\n        displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);\r\n        setTextareaBorderColor('inputBorder');\r\n        setTextareaBorderFocusColor('inputBorder');                        \r\n      }      \r\n    }\r\n\r\n    //when change status button clicked\r\n    const handleChangeStatusBtn = () => {\r\n      displayControl(displayOff, displayOff, displayOff, displayOff, displayOff, displayOff, displayOn, displayOff, true);       \r\n    }\r\n\r\n    //when status changed and answer 'yes' to confirmation question\r\n    const handleStatusChangeConfirm = () => {\r\n     displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);\r\n     toggleItemCompletion();      \r\n    }\r\n\r\n    //when status changed and answer 'no' to confirmation question\r\n    const handleStatusChangeDeny = () => {   \r\n      displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);     \r\n    }\r\n\r\n  //update task comletion status\r\n    const toggleItemCompletion = () => {\r\n      const newList = replaceItemAtIndex(todoList, index, {\r\n        ...item,\r\n        completed: !item.completed,\r\n        updated_at: timeStampFormatted()\r\n      });    \r\n      const todoDataModCheck =    {\r\n        id: item.id,\r\n        user_id: item.user_id,        \r\n        title: item.title,\r\n        completed: !item.completed,\r\n        created_at: item.created_at,\r\n        updated_at: timeStampFormatted()\r\n      }\r\n      updateTask(item.id, todoDataModCheck); \r\n      setTodoList(newList); \r\n      setUpdatedData(todoDataModCheck);       \r\n    };\r\n  \r\n    //delete item on click, assigned to delete popup 'confirm' button\r\n    const deleteItem = () => {       \r\n        deleteTask(item.id);       \r\n        const newList = removeItemAtIndex(todoList, index);   \r\n        setTodoList(newList);             \r\n        displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);   \r\n    };  \r\n\r\n    //after clicking delete button\r\n    const handleDeleteBtnClick = () => {  \r\n      displayControl(displayOff, displayOff, displayOff, displayOff, displayOn, displayOff, displayOff, displayOff, true);          \r\n    }\r\n\r\n    //after clicking delete confirm button \r\n    const handleDeleteBtnYesClick = () => {          \r\n        deleteItem();              \r\n    }\r\n\r\n    //after clicking delete no - 'go back' button\r\n    const handleDeleteBtnNoClick = () => {    \r\n      displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true);                \r\n    }\r\n   \r\n    //after clicking show details\r\n    const handleShowDetailsBtn = () => { \r\n     displayControl(displayOff, displayOff, displayOff, displayOff, displayOff, displayOff, displayOff, displayOn, true);\r\n     setTaskStatusView(displayOff);   \r\n    }\r\n\r\n    //after clicking close details\r\n    const handleCloseDetailsBtn = () => {\r\n      displayControl(displayOn, displayOn, displayOn, displayOn, displayOff, displayOff, displayOff, displayOff, true); \r\n      setTaskStatusView(displayOn); \r\n    }     \r\n \r\n    //item completed/in progress to display\r\n    const itemStatusDisplay = (completedData) => {        \r\n       if (completedData === true) {\r\n         return todoItemStatusCompletedText;\r\n       }\r\n       else {\r\n         return todoItemStatusInProgressText;\r\n       }\r\n         }    \r\n    \r\n    //display control function     \r\n    const displayControl = (setBtnEdit, setBtnDelete, setBtnStatus, \r\n       setBtnDetails, setPopupDel, setPopupEdit, setPopupStatus, setDetailView, disableEditbool) => {\r\n      setTaskBtnEdit(setBtnEdit);\r\n      setTaskBtnDelete(setBtnDelete);\r\n      setTaskBtnDetails(setBtnDetails); \r\n      setTaskBtnStatus(setBtnStatus); \r\n      setYesNoDeletePopup(setPopupDel); \r\n      setYesNoEditPopup(setPopupEdit); \r\n      setYesNoStatusPopup(setPopupStatus);       \r\n      setDisabled(disableEditbool);   \r\n      setTaskDetailView(setDetailView);        \r\n    }        \r\n\r\n\r\n    return (      \r\n        <div \r\n        sx={{\r\n          background: 'box',     \r\n          backgroundColor: 'boxBackground',\r\n          color: 'text',\r\n          border: '2px solid', \r\n          borderColor: 'boxBorder',  \r\n          borderRadius: 4,\r\n          fontSize: 4,\r\n          margin: 3,\r\n          padding: 3,\r\n        }}\r\n        ><BigText text={ `Task # ${item.id}:`} marginBottom={2} />\r\n        {/* display with task title*/}\r\n          <TextArea disabled={disabled} value={textareaDisplay} textareaBorderColor={textareaBorderColor}\r\n          textareaBorderFocusColor={textareaBorderFocusColor}\r\n        onChange={editItemText} backgroundColor={`inputBackground`}/>     \r\n        <Flex sx={{flexDirection: 'row',\r\n                   marginBottom: 2,\r\n                   '@media screen and (max-width: 700px)': {                   \r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'}}} >            \r\n          <MediumText text={itemStatusDisplay(item.completed)} display={taskStatusView} />      \r\n        </Flex>   \r\n        <Flex sx={{flexWrap: 'wrap',\r\n                   flexDirection: 'row',\r\n                   justifyContent: 'flex-start',\r\n                   '@media screen and (max-width: 700px)': {\r\n                    flexDirection: 'column',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'}}}> \r\n           {/* show details button */}\r\n           <ButtonPrimary\r\n            onClick={handleShowDetailsBtn} displayIt={taskBtnDetails}\r\n            text={todoItemShowDetailsBtnTxt} backgroundColor={'buttons1'}/>  \r\n            {/* update task button */}\r\n            <ButtonPrimary           \r\n            onClick={handleUpdateBtn} displayIt={taskBtnEdit}\r\n            text={updateButtonText} backgroundColor={'buttons2'}/>   \r\n              {/* change status button*/} \r\n            <ButtonPrimary \r\n            onClick={handleChangeStatusBtn} displayIt={taskBtnStatus}\r\n            text={ todoItemChangeStatusBtnTxt} backgroundColor={'buttons2'}/>  \r\n               {/* delete button*/}               \r\n            <ButtonPrimary \r\n            onClick={handleDeleteBtnClick} displayIt={taskBtnDelete}\r\n            text={deleteText} backgroundColor={'buttons3'}/>       \r\n        </Flex>        \r\n            {/* popup with choices yes or no for editing*/}         \r\n        <ButtonsWrapper displayStyle={yesNoEditPopup} contentArea={\r\n        <YesNoPopup  onClickYes={() => confirmEditChanges(updatedData)} \r\n        onClickNo={handleUpdateNoBtn} yesText={yesText} noText={noText} messageText={editYesNoMessage}/>\r\n        }/>  \r\n            {/* popup with choices yes or no for delete*/}          \r\n        <ButtonsWrapper displayStyle={yesNoDeletePopup} contentArea={\r\n          <YesNoPopup onClickYes={handleDeleteBtnYesClick} \r\n          onClickNo={handleDeleteBtnNoClick} yesText={yesText} noText={noText} messageText={deleteYesNoMessage}/>\r\n        }/>\r\n            {/* popup with choices yes or no for changing status*/}     \r\n         <ButtonsWrapper displayStyle={yesNoStatusPopup} contentArea={\r\n          <YesNoPopup onClickYes={handleStatusChangeConfirm} \r\n          onClickNo={handleStatusChangeDeny} yesText={yesText} noText={noText} messageText={statusYesNoMessage} />\r\n        }/>        \r\n        <TaskDetails displayIt={taskDetailView} taskData={updatedData} clickClose={handleCloseDetailsBtn} />\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function replaceItemAtIndex(arr, index, newValue) {\r\n    return [...arr.slice(0, index), newValue, ...arr.slice(index + 1)];\r\n  }\r\n  \r\n  function removeItemAtIndex(arr, index) {\r\n    return [...arr.slice(0, index), ...arr.slice(index + 1)];\r\n  }\r\n\r\n\r\n  export default TodoItem;","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { useState } from 'react';\r\nimport { todoListState } from '../../functions/recoil';\r\nimport ButtonPrimary from '../atoms/ButtonPrimary';\r\nimport { addTask } from '../../API/fetch';\r\nimport MediumText from '../atoms/MediumText';\r\nimport ButtonWithlink from '../atoms/ButtonWithLink';\r\nimport TextArea from '../atoms/TextArea';\r\nimport { switchBtnTxt, timeStampFormatted } from '../../functions/functionStorage';\r\nimport { todoCreatorAddTaskBtnTxt,\r\n  todoCreatorTaskAddedTxt,  \r\n  todoCreatorTaskEmptyTxt,\r\n  todoCreatorTitleTxt,\r\n  todoCreatorPlaceholderTxt, \r\n  todoCreatorBackToMainTxt,\r\n  todoCreatorNotUpdatedYetTxt,   \r\n} from '../../content/contentEng';\r\n\r\n\r\nfunction TodoItemCreator() {  \r\n  const [inputValue, setInputValue] = useState('');  \r\n  const [createBtnTxt, setCreateBtnTxt] = useState(todoCreatorAddTaskBtnTxt);\r\n  const setTodoList = useSetRecoilState(todoListState);  \r\n\r\n//add new task handle\r\n  const addItem = () => {\r\n    const todoData =    {\r\n      id: getId(),\r\n      user_id: 704,\r\n      title: inputValue,\r\n      completed: false,\r\n      created_at: timeStampFormatted(),\r\n      updated_at: todoCreatorNotUpdatedYetTxt\r\n    }  \r\n  \r\n    //no empty input validator\r\n    if (todoData.title.length > 0 ) {\r\n      setTodoList((oldTodoList) => [\r\n        ...oldTodoList,\r\n       todoData,\r\n      ]);\r\n      setInputValue('');\r\n      addTask(todoData); \r\n      switchBtnTxt(setCreateBtnTxt, todoCreatorAddTaskBtnTxt, todoCreatorTaskAddedTxt);  \r\n    }\r\n    else {\r\n      switchBtnTxt(setCreateBtnTxt, todoCreatorAddTaskBtnTxt, todoCreatorTaskEmptyTxt);\r\n    }\r\n     \r\n  };\r\n\r\n  //taking input value for task from textarea\r\n  const handleOnChange = ({target: {value}}) => {\r\n    setInputValue(value);\r\n  };\r\n\r\n\r\n  return (\r\n    <Flex\r\n    sx={{\r\n      flexDirection: 'column',\r\n      background: 'box',   \r\n      backgroundColor: 'boxBackground',\r\n      color: 'text',      \r\n      border: '2px solid',\r\n      borderColor: 'boxBorder', \r\n      borderRadius: 4,\r\n      fontSize: 4,\r\n      margin: 3,\r\n      padding: 3,\r\n    }}\r\n  ><MediumText text={todoCreatorTitleTxt} marginBottom={2} />\r\n      <TextArea textareaBorderFocusColor={'inputBorderFocus'} value={inputValue} onChange={handleOnChange} backgroundColor={`inputBackground`} \r\n      placeholder={todoCreatorPlaceholderTxt}/>\r\n      <Flex sx={{flexDirection: 'row',\r\n                 justifyContent: 'space-between',\r\n                 flexWrap: 'wrap',\r\n                 '@media screen and (max-width: 700px)': {\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'baseline',                  \r\n                } }}>\r\n        <ButtonPrimary onClick={addItem} text={createBtnTxt} backgroundColor={`buttons2`} />\r\n        <ButtonWithlink to={`home`} text={todoCreatorBackToMainTxt} backgroundColor={`buttons1`} />\r\n      </Flex>\r\n    </Flex>\r\n  );\r\n}\r\n\r\n\r\n// utility for creating unique Id\r\nlet id = 0;\r\nfunction getId() {\r\n  return id++;\r\n}\r\n\r\n\r\nexport default TodoItemCreator;","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, jsx, Label, Select } from 'theme-ui';\r\n\r\n\r\nconst OptionBox = ({onChange, options, value, labelText}) => (  \r\n  <Flex>\r\n    <Label sx={{flexDirection: `column`,\r\n                   fontFamily: 'heading',\r\n                   fontWeight: 'heading',                   \r\n                   fontSize: [`12, 14, 16`],\r\n                   margin: 0,\r\n              }}>{labelText}\r\n        <Select onChange={onChange} value={value}       \r\n            sx={{\r\n              backgroundColor: `optionBoxBackground`,\r\n              borderRadius: '4px',\r\n              border: '2px solid',\r\n              borderColor: 'inputBorder',             \r\n              color: `optionsText`,\r\n              display: 'inline-block',\r\n              fontFamily: 'heading',\r\n              fontSize: [0, 1],\r\n              fontWeight: 'bold',\r\n              marginBottom: 1,\r\n              px: 3, // shorthand for defining padding-left and padding-right\r\n              py: 2, // shorthand for defining padding-top and padding-bottom\r\n              textDecoration: 'none',\r\n              // textTransform: 'uppercase',\r\n              '&:hover, &:focus': { backgroundColor: 'foreground',\r\n              border: '2px solid',\r\n              borderColor: 'inputBorderFocus',\r\n              outline: 'none !important' },\r\n            }}\r\n          >   \r\n          {options.map(el => (\r\n          <option key={el}  value={`${el}`}>{el}</option>\r\n        ))}        \r\n        </Select> \r\n      </Label>\r\n  </Flex> \r\n);\r\n\r\n\r\nexport default OptionBox;\r\n\r\n\r\n    ","import { useRecoilState } from 'recoil';\r\nimport { todoListFilterState } from '../../functions/recoil';\r\nimport OptionBox from '../molecules/OptionBox';\r\nimport { todoFilterShowAllTxt, todoFilterCompletedOnlyTxt, todoFilterInProgressOnlyTxt } from '../../content/contentEng';\r\n\r\nfunction TodoListFilters() {\r\n    const [filter, setFilter] = useRecoilState(todoListFilterState);\r\n  \r\n    const updateFilter = ({target: {value}}) => {\r\n      setFilter(value);\r\n    };\r\n\r\n    //to change option text do it here here and in recoil.js in function ...filteredTodoListState = selector...\r\n    const options = [todoFilterShowAllTxt, todoFilterCompletedOnlyTxt, todoFilterInProgressOnlyTxt];\r\n  \r\n    return (\r\n        <OptionBox options={options} value={filter} onChange={updateFilter} />         \r\n    );\r\n  }\r\n\r\n\r\n  export default TodoListFilters;","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { jsx, Flex } from 'theme-ui'\r\nimport { useRecoilValue } from 'recoil';\r\nimport { todoListStatsState } from '../../functions/recoil';\r\nimport ProgressCounter from '../atoms/ProgressCounter';\r\nimport MediumText from '../atoms/MediumText';\r\nimport { todoActionStatsTitleTxt, \r\n  todoActionStatsTotalTxt,\r\n  todoActionStatsCompletedTxt,\r\n  todoActionStatsInProgressTxt\r\n } from '../../content/contentEng';\r\n\r\n\r\nfunction TodoListStats() {\r\n      \r\n    const {\r\n      totalNum,\r\n      totalCompletedNum,\r\n      totalUncompletedNum, \r\n    } = useRecoilValue(todoListStatsState);  \r\n\r\n     \r\n    return (\r\n      <Flex\r\n      sx={{\r\n        flexDirection: 'column',           \r\n        backgroundColor: 'boxBackground',\r\n        border: '2px solid', \r\n        borderColor: 'boxBorder',\r\n        borderRadius: 4,\r\n        fontSize: 4,\r\n        margin: 3,\r\n        padding: 3,\r\n      }}\r\n    ><MediumText text={todoActionStatsTitleTxt} marginBottom={2} />\r\n        <ProgressCounter text={`${todoActionStatsTotalTxt} ${totalNum}`} borderColor={`boxBorder`} \r\n        color={`counterText`} \r\n        backgroundColor={`counterAll`} />\r\n        <ProgressCounter text={`${todoActionStatsCompletedTxt} ${totalCompletedNum}`}  borderColor={`boxBorder`} \r\n        color={`counterText`}\r\n        backgroundColor={`counterCompleted`} />\r\n        <ProgressCounter text={`${todoActionStatsInProgressTxt} ${totalUncompletedNum}`}  borderColor={`boxBorder`} \r\n        color={`counterText`}\r\n        backgroundColor={`counterInProgress`} /> \r\n      </Flex>\r\n    );\r\n  }\r\n\r\n  \r\n  export default TodoListStats;\r\n\r\n","/** @jsxRuntime classic */\r\n/** @jsx jsx */\r\nimport { Flex, Input, jsx, Label } from 'theme-ui';\r\n\r\n\r\nconst SearchField = ({type, placeholder, value, labelText, onChange, id}) => (  \r\n  <Flex>\r\n    <Label sx={{flexDirection: `column`,\r\n                   fontFamily: 'heading',\r\n                   fontWeight: 'heading',                   \r\n                   fontSize: [`12, 14, 16`],\r\n                   margin: 0,\r\n              }}>{labelText}\r\n        <Input id={id} value={value} onChange={onChange}\r\n          type={type} placeholder={placeholder}\r\n          sx={{\r\n            backgroundColor: `searchFilterBackground`,\r\n            borderRadius: '4px',\r\n            border: '2px solid',\r\n            borderColor: 'inputBorder',    \r\n            color: `searchText`,\r\n            display: 'inline-block',\r\n            fontFamily: 'heading',\r\n            fontSize: [1, 2],\r\n            fontWeight: 'bold',\r\n            marginBottom: 1,\r\n            px: 3, // shorthand for defining padding-left and padding-right\r\n            py: 2, // shorthand for defining padding-top and padding-bottom\r\n            textDecoration: 'none',\r\n            // textTransform: 'uppercase',\r\n            '&:hover, &:focus': {backgroundColor: `searchFilterBackground`,\r\n                                 border: '2px solid',\r\n                                 borderColor: 'inputBorderFocus',            \r\n                                 outline: 'none !important'},\r\n            '&::placeholder' : {color: 'placeHolderText'}\r\n          }}\r\n        >    \r\n        </Input> \r\n      </Label>\r\n  </Flex> \r\n);\r\n\r\n\r\nexport default SearchField;\r\n\r\n\r\n    ","import {\r\n  useRecoilState,\r\n  useRecoilValue,\r\n} from 'recoil';\r\nimport { useState, useEffect } from 'react';\r\nimport { filteredTodoListState, todoListState } from '../../functions/recoil';\r\nimport TodoItem from './TodoItem';\r\nimport TodoItemCreator from './TodoItemCreator';\r\nimport TodoListFilters from './TodoListFilters';\r\nimport TodoListStats from './TodoListStats';\r\nimport { ThemeProvider, Container, Flex, Box } from 'theme-ui';\r\nimport theme from '../../styles/themes/theme';\r\nimport { getAllTasks } from '../../API/fetch';\r\nimport SearchField from '../atoms/SearchField';\r\nimport MediumText from '../atoms/MediumText';\r\nimport {CircleArrow as ScrollUpButton} from 'react-scroll-up-button';\r\nimport { todoListTitleTxt, todoListSearchPlaceholderTxt } from '../../content/contentEng';\r\n\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useRecoilState(todoListState);\r\n    const [toSearch, setToSearch] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n    const taskList = [];\r\n    const [taskText, setTaskText] = useState([]);\r\n    const filteredData =  useRecoilValue(filteredTodoListState);\r\n    \r\n\r\n    //decoy for unused searchResults state    \r\n    const decoy = searchResults;  \r\n   \r\n    useEffect(() => {\r\n      const getTodos = async () => {\r\n      getAllTasks(setTodos)\r\n      }\r\n     getTodos()  \r\n     //decoy for unused searchResults state    \r\n    //  setTaskList(taskList);\r\n   }, [])  \r\n  \r\n   useEffect(() => {  \r\n      taskList.map(el => {        \r\n          setTaskText(taskText => [...taskText, el.title]);})   \r\n       }, [todos])\r\n  \r\n   useEffect(() => {\r\n      let results = taskText.filter(item =>\r\n        item.toString().toLowerCase().includes(toSearch)\r\n      );\r\n      setSearchResults(results); \r\n    }, [toSearch]);  \r\n  \r\n   let filterData = filteredData.filter(item => item.title.includes(toSearch));\r\n  \r\n   const handleChange = (e) => {\r\n       setToSearch(e.target.value);\r\n   } \r\n\r\n\r\n    return (\r\n      <ThemeProvider theme={theme}>       \r\n        <Container>            \r\n        <TodoItemCreator/>  \r\n        <Flex sx={{           \r\n          backgroundColor: 'boxBackground',\r\n          color: 'text',\r\n          border: '2px solid', \r\n          borderColor: 'boxBorder',\r\n          borderRadius: 4,\r\n          fontSize: 4,\r\n          margin: 3,\r\n          padding: 3,\r\n          flexDirection: 'column'\r\n        }}><MediumText text={todoListTitleTxt} marginBottom={2} />\r\n        <TodoListFilters />\r\n        <SearchField\r\n          type={\"text\"}\r\n          placeholder={todoListSearchPlaceholderTxt}\r\n          value={toSearch}\r\n          onChange={handleChange}        \r\n        /></Flex>\r\n        <TodoListStats />  \r\n        <ScrollUpButton />             \r\n        <Flex sx={{ flexWrap: 'wrap' }}>  \r\n          {filterData.map((todoItem) => (\r\n            <Box key={todoItem.id} sx={{ width: ['100%'] }}>\r\n              <TodoItem item={todoItem} todos={todos} />\r\n            </Box>         \r\n         ))}\r\n          </Flex>\r\n        </Container>     \r\n      </ThemeProvider>    \r\n    );\r\n  }\r\n\r\n\r\n  export default TodoList;","import { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport TitleScreen from './components/recoilTodoList/TitleScreen';\r\nimport TodoList from './components/recoilTodoList/TodoList';\r\n\r\n\r\nconst App = () => {\r\n  return (   \r\n    <Router>\r\n      <Switch>\r\n       <Redirect exact from=\"/\" to=\"/home\" />    \r\n        <Route path=\"/action\" component={TodoList} />   \r\n        <Route path=\"/home\" component={TitleScreen} />   \r\n      <TodoList />    \r\n     </Switch>         \r\n    </Router>    \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>   \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}